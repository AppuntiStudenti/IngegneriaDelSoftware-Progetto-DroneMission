/*
*  Generated by AN Unibo
*/
package it.unibo.contact.DroneMissionSystem;
import it.unibo.contact.platformuv.*;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.IBasicEnv;
import it.unibo.is.interfaces.IContactSystem;
import it.unibo.is.interfaces.IOutputView;
public abstract class DroneMissionSystemMain implements IContactSystem{
	protected IBasicEnv env = null;
	protected IOutputView view = null;
 	
	protected DroneSupport Drone;
	protected HeadQuarterSupport HeadQuarter;
	public void doJob(){
		initProperty();
		init();
		configure();
		start();
	}
	protected void initProperty(){
	//Properties used by the system  (TODO)
	//System.setProperty("observeSpace", "unset");	//automatically set by selectInput
	//Properties to set communication parameters 
	//System.setProperty("numOfConnectionAttempts", "15");
	//System.setProperty("inputTimeOut", "20000");
	//Properties to show the internal behavior 
	System.setProperty("coreTrace", "unset");
	System.setProperty("medclTrace", "unset");
	System.setProperty("connTrace", "unset"); 
	System.setProperty("signalTrace", "unset");
	System.setProperty("obsTrace", "unset");	
	System.setProperty("ConnProtLindaLike", "unset"); 
	System.setProperty("ConnProtIn", "unset");
	System.setProperty("ConnProtOut", "unset");
	System.setProperty("tcpLowTrace", "unset");
	  }
	protected void init(){
		initSupport();
	}
	protected void initSupport(){
		MsgUtil.init(view);
		LindaLike core = ((LindaLike)LindaLike.initSpace(view));
	}
		protected void configureSystem(){
			
			RunTimeKb.init(view);
		//Protocols for application messages
			RunTimeKb.addSubject("TCP" , "HeadQuarter" , "photo","localhost",4040 );   	
			RunTimeKb.addSubject("TCP" , "Drone" , "command","localhost",4050 );   	
		//Application messages
			RunTimeKb.addInputConnMsg( "coreCmd", true); //system request
		  		RunTimeKb.addInputConnMsg( "photo", false);
		  		RunTimeKb.addInputConnMsg( "command", true);
		}
		protected void configureSubjects(){
		try {
		Drone = DroneSupport.create(); //new Drone();
		Drone.setName("Drone");
		Drone.setEnv(env);
		Drone.initInputSupports();	//AUGUST 2012
		HeadQuarter = HeadQuarterSupport.create(); //new HeadQuarter();
		HeadQuarter.setName("HeadQuarter");
		HeadQuarter.setEnv(env);
		HeadQuarter.initInputSupports();	//AUGUST 2012
		registerObservers();
		}catch(Exception e){e.printStackTrace();}
		}
	protected void configure(){
	 	configureSystem();
		configureSubjects();  
	}
	protected void registerObservers(){
	}
	protected void start(){
		Drone.start();
		HeadQuarter.start();
	}
   	public boolean isPassive() { return true; }
	public void terminate() {
	System.out.println("DroneMissionSystem TERMINATES");
	try {
	} catch (Exception e) {
		e.printStackTrace();
	}	
	System.exit(1);//The radical solution
	}
	public static void main(String args[]) throws Exception {
	DroneMissionSystem system = new DroneMissionSystem( );
	system.doJob();
	}
}//DroneMissionSystemSupportMain
