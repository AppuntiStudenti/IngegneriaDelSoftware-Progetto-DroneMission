ContactSystem HeadQuarterAnalisys -awt -o spaceUpdater [host="localhost" port=8070];

Context subSystemDrone -w;
Context subSystemHeadQuarter -w;
Context subSystemSmartDevice -w;

//		Subsystems -w (window)
Subject smartdevice context subSystemSmartDevice ; //external;
Subject drone context subSystemDrone ; //external;
//Subject headQuarter context subSystemHeadQuarter;

Subject storage context subSystemHeadQuarter;
Subject uiLog context subSystemHeadQuarter;
Subject uiCommand context subSystemHeadQuarter;
Subject controlUnit context subSystemHeadQuarter; 

//		Messages
Dispatch picturePackage; 
Request command;
Signal sensorsData;
Signal notify;

// User messages
Request showMeMission;
Request showMeSensorsData;
Request showMePicturePackage;
Request newCommand;

// Forward

//		Highlevel communications
//Drone sends picturePackage
sendDatapicturePackage: drone forward picturePackage to controlUnit;  
//Headquarter receives picturePackage
receiveDatapicturePackage: controlUnit serve picturePackage support=TCP [host="localhost" port=4060];

//Drone sends data of sensors
sendsensorsDatas: drone emit sensorsData;
//Headquarter and smartdevice receive data of sensors
controlUnitReceiveSensorsDatas: controlUnit sense sensorsData;
smartdeviceReceivesensorsDatas: smartdevice sense sensorsData;

//Drone notifies start/end mission
sendnotify: drone emit notify;
//smartdevice receives notifications about mission
smartdeviceReceiveNotify: smartdevice sense notify;

//HeadQuarter sends command
sendCommand: controlUnit demand command to drone;
//Drone receives command
receiveCommand: drone grant command support=TCP [host="localhost" port=4050];

// User communication
// show me something
sendShowMeMission: uiLog demand showMeMission to storage;
receiveShowMeMission: storage grant showMeMission;

sendShowMeSensorsData: uiLog demand showMeSensorsData to storage;
receiveShowMeSensorsData: storage grant showMeSensorsData;

sendShowMePackagepicturePackage: uiLog demand showMePicturePackage to storage;
receiveShowMePackagepicturePackage: storage grant showMePicturePackage;

// send command
sendUINewCommand: uiCommand demand newCommand to storage;
receiveUINewCommand: storage grant newCommand;


BehaviorOf controlUnit {
	
	var String command
	var String sensorsDatasReceived
	var String picturePackageReceived
	var String commandAnswer
	
	var boolean tmpCheck
	
	// store info from drone
	action void storeDataSensors(String sensorsDatasReceived)
	action void storePicturePackage(String picturePackageReceived)
		
	// check and get command to send
	action boolean hasCommandToSend()
	action String getCommandToSend()
	action boolean isCommandStart(String cmd)
	
	// check and store reply 
	action boolean checkCommandReply(String reply)
	action void storeCommandReply(String reply)
	
	// shutdown
	action void shutdown()
	
	state st_controlUnit_init initial
		println ("----- HeadQuarter Initialized -----") 
		goToState st_controlUnit_ready
	endstate
	
	state st_controlUnit_ready
		println ("----- Ready to send command -----")
		set tmpCheck = exec hasCommandToSend()
		if { tmpCheck == true }	{ 
			set command = exec getCommandToSend()
			set tmpCheck = exec isCommandStart(command)
			if { tmpCheck == true } {
				doOutIn sendCommand
				acquireAnswerFor command
				set commandAnswer = code.curReplyContent 
			}
		}
//		acquireAnswerFor command
//		set commandAnswer = code.curReplyContent
//		println("DRONE REPLY: " + commandAnswer)
//		if { commandAnswer == "OK" } { goToState st_controlUnit_onMission }
	endstate
	
	state st_controlUnit_onMission
		// check if command is clicked in Dashboard and send it
		set command = exec getCommandToSend()
		doOutIn newCommand(command)
		acquireAnswerFor command
		set commandAnswer = code.curReplyContent
		if { commandAnswer == "FAIL" } { println("DRONE CMD FAILED: " + commandAnswer) }
		
		if { commandAnswer == "OK" && command == "stop"} { 
			goToState st_controlUnit_endMission
		}
		
		// get picturePackages
		onMessage? picturePackage goToState st_controlUnit_receivedpicturePackage
		
		// get sensors data
		onMessage? sensorsData goToState st_controlUnit_receivedSensorsData
		
	endstate
	
	state st_controlUnit_receivedSensorsData
		// get sensors data
		showMsg("on receivedSensorsData")
		doPerceive controlUnitReceiveSensorsDatas()
		set sensorsDatasReceived = code.curInputMsgContent
		// update Dashboard
		call storeDataSensors(sensorsDatasReceived)

		goToState st_controlUnit_onMission
	endstate
	
	state st_controlUnit_receivedpicturePackage
		// get picturePackage data
		doIn receiveDatapicturePackage()
		set picturePackageReceived = code.curInputMsgContent
		
		// store info
		call storePicturePackage(picturePackageReceived)
		
		goToState st_controlUnit_onMission
	endstate
	
	state st_controlUnit_endMission
		call shutdown()
		transitToEnd
	endstate
}

BehaviorOf smartdevice {
	
	var String notifyContent
	var String dataDroneReceived 
	
	action void notifyUserMissionStarted()
	action void updateGauges(String data)
	action void missionFinished()
	
	state st_Smartdevice_init initial
		onMessage notify transitTo st_Smartdevice_missionStart
	endstate
	
	state st_Smartdevice_missionStart
		call notifyUserMissionStarted()
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_waitingForData
		onMessage? sensorsData goToState st_Smartdevice_receivedData
		onMessage? notify goToState st_Smartdevice_endMission
	endstate
	
	state st_Smartdevice_receivedData
		// get data from drone
		doPerceive smartdeviceReceivesensorsDatas()
		set dataDroneReceived = code.curInputMsgContent
		showMsg(dataDroneReceived)
		call updateGauges(dataDroneReceived)

		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_notifyHandler
		doPerceive smartdeviceReceiveNotify()
		set notifyContent = code.curInputMsgContent
		if {notifyContent == "start"} { goToState st_Smartdevice_missionStart }
		if {notifyContent == "end" } { goToState st_Smartdevice_endMission }
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_endMission
		call missionFinished()
		transitToEnd
	endstate
}

//		Behaviors 
//Behavior of Drone
BehaviorOf drone {
	var String msgCommand = ""
	var String cmdName = ""
	var String cmdValue = ""

	var boolean start
	var boolean stop
	var boolean speed

	var String sensorsDatas
	var String datapicturePackage

	action void startMission()
	action void endMission()
	action void setSpeed(String value)
	
	action String getDataFromSensors()
	action String getDatapicturePackage()

	state st_Drone_init initial
		println ("----- Drone Initialized -----")
		goToState st_Drone_ready
	endstate
	
	state st_Drone_ready
		println ("----- Waiting setSpeed -----")
		doInOut receiveCommand()
		set msgCommand = call curInputMsg.msgContent()
		set cmdName = call Drone.getCommandName(msgCommand)
		set start = call cmdName.contains("setspeed")
		if{start} {	
			goToState st_Drone_startMission
		}
		replyToRequest command("FAIL");
		println ("ERROR: expected 'setspeed' command to start. Received: " + cmdName)
	endstate
	
	state st_Drone_startMission
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
		exec setSpeed(cmdValue)
		replyToRequest command("OK");
		exec startMission() // contains setspeed and starmission 
		doOut sendnotify("start")
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_setspeed
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
		exec setSpeed(cmdValue)
		goToState st_Drone_onMission
	endstate

	state st_Drone_onMission
		// send data sensors
		set sensorsDatas = exec getDataFromSensors()
		doOut sendsensorsDatas(sensorsDatas)

		// send picturePackages
		set datapicturePackage = exec getDatapicturePackage()
		doOut sendDatapicturePackage(datapicturePackage) // every x secondi?

		// received a command setSpeed or stop?
		onMessage? command goToState st_Drone_commandHandler
	endstate

	state st_Drone_commandHandler
		doInOut receiveCommand()
		set cmdName = call Drone.getCommandName(code.curInputMsgContent)
		
		// check if command is correct
		set stop = call cmdName.contains("stop")
		set speed = call cmdName.contains("setspeed")
		if { stop || speed } {
			replyToRequest command ("OK");
			if {stop} { goToState st_Drone_endMission };
			if {speed} { goToState st_Drone_setspeed }
		}
		replyToRequest command("FAIL");
		// get back on mission
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_endMission
		exec endMission() // empty method - maybe can be used in future?
		doOut sendnotify("end")
		transitToEnd
	endstate
}
