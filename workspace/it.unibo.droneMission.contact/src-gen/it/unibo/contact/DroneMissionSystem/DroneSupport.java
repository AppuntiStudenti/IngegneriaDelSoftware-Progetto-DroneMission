/*
*  Generated by AN Unibo
*/
package it.unibo.contact.DroneMissionSystem;
//Import generated by the contact spec
//Other Import
import it.unibo.contact.platformuv.*;
import it.unibo.is.interfaces.*;
import it.unibo.is.interfaces.platforms.*;
//import org.eclipse.xtext.xbase.lib.*;
//import org.eclipse.xtext.xbase.lib.Functions.*;
import java.util.Vector;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.protocols.IConnInteraction;
//import java.awt.Color;
//For Xbase code 
import org.eclipse.xtext.xbase.lib.Functions.*;
import org.eclipse.xtext.xbase.lib.*;

public abstract class DroneSupport extends Subject{
	private static Drone obj = null;
	/*
	* Factory method: returns a singleton
	*/
	public static Drone create() throws Exception{
		if( obj == null ) obj = new Drone();
		return obj;
	}
	/* -------------------------------------
	* Local state of the subject
	* --------------------------------------
	*/
	protected int lastMsgNum = 0;
	
	
	//Constructor
	public DroneSupport() throws Exception{
		super();
	 	isMultiInput=true;
	 	inputMessageList=new String[]{"command", "endSelectInput"};
		//Singleton
		if( obj != null ) return;
	//	initLastMsgRdMemo();  //put in initGui since the name must be set
		 obj = (Drone)this;
	}
	
	/* -------------------------------------
	* Init
	* --------------------------------------
	*/
	//PREPARE INPUT THREADS
	public void initInputSupports() throws Exception{
	PlatformExpert.findInSupport( getName(), "command" ,true,view);
	}
	
 	protected void initLastMsgRdMemo(){
 			lastMsgRdMemo.put("command"+getName(),0);
 	}
	protected void initGui(){
		if( env != null ) view = env.getOutputView();
	    initLastMsgRdMemo(); //put here since the name must be set
	}
	
	/* -------------------------------------
	* State-based Behavior
	* -------------------------------------- 
	*/ 
   	
 	/* -------------------------------------
	* COMMUNICATION CORE OPERATIONS for Drone
	* --------------------------------------
	*/
 
	protected void hl_Drone_forward_photo_HeadQuarter( String M  ) throws Exception {
	M = MsgUtil.putInEnvelope(M);
	IMessage m = new Message("HeadQuarter_photo("+getName()+",photo,"+M+","+msgNum+")");
	comSup.outOnly( "HeadQuarter","photo",getName() , m );
	msgNum++;
	
	}
	
	protected void hl_Drone_emit_dataSensor( String M  ) throws Exception {
	M = MsgUtil.putInEnvelope(M);
	IMessage m = new Message("dataSensor("+getName()+",dataSensor,"+M+","+msgNum+")");
	comSup.outOnly( getName() ,"dataSensor",  m );
	msgNum++;
	
	}
	
	protected IMessage hl_Drone_accept_command(   ) throws Exception {
	//EXPERT for COMPOSED Drone_accept_command isInput=true withAnswer=true applVisible=false
	IMessage answer = comSup.inOutAck(
	getName() ,"command", 
	"Drone_command(ANY,command,M,N)" ); 
	return answer;
	
	}
	
	
 	/* -------------------------------------
	* CONNECTION OPERATIONS for Drone
	* --------------------------------------
	*/
	
	/* -------------------------------------
	* Local body of the subject
	* --------------------------------------
	*/
	
	public abstract void doJob() throws Exception;
	
	protected IMessage acquire(String msgId) throws Exception{
	  //showMsg("acquire "  +  msgId ); 
	  IMessage m;
	  //USER MESSAGES
	  if( msgId.equals("command")){
	  	m = hl_Drone_accept_command();
	  	return m;
	  }
	 if( msgId.equals("endSelectInput")){
	  String ms = MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	    getName(), "endSelectInput", "ANY", "N");
	  //Serve the auto-dispatch
	  IMessage min = core.in(new Message(ms).toString());
	  return min;
	 }
	  throw new Exception("Wrong msgId:"+  msgId);
	}//acquire	
	
	/* -------------------------------------
	* Operations (from Java)
	* --------------------------------------
	*/
	//Variable subject declarations
	
		
	/* -------------------------------------
	* Termination
	* --------------------------------------
	*/
	public void terminate() throws Exception{ //by EndSubjectConnections
		DroneForward_photo_HeadQuarterEnd();
		DroneEmit_dataSensorEnd();
		DroneAccept_commandEnd();
	 			 //Auto-forward a dispatch to finish selectInput operations
	 		    String ms =
	 		      MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	 		       getName(), "endSelectInput", "endSelectInput", "0");
	 		    core.out(ms);
	}
	
	// Teminate operations
	protected void DroneForward_photo_HeadQuarterEnd() throws Exception{
		PlatformExpert.findOutSupportToEnd("Drone","photo",getName(),view );
		showMsg("terminate DroneForward_photo_HeadQuarter");
	}
	protected void DroneEmit_dataSensorEnd() throws Exception{
		//No operation is done at subject level. The SenseRemote threads are terminates 
		//when the main application is closed
	//		PlatformExpert.findOutSupportToEnd("space","coreCmd","coreToDSpace", view);		
	//		showMsg("terminate signal support");
	}
	protected void DroneAccept_commandEnd() throws Exception{
	 		PlatformExpert.findInSupportToEnd(getName(),"command",view );
		showMsg("terminate DroneAccept_command");
	}
}//DroneSupport
