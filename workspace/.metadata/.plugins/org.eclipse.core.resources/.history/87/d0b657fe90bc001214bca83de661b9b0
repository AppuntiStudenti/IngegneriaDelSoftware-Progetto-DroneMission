package it.unibo.droneMission.tests;

import it.unibo.droneMission.gauge.Odometer;
import junit.framework.TestCase;


public class OdometerTest extends TestCase {
	protected Odometer od;

	public OdometerTest(String arg0){
		super(arg0);
	}
	
	protected void setUp() throws Exception {
		super.setUp();
		od = new Odometer();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	protected boolean invariant(Odometer O){
		return((((O.getVal()>=Odometer.INIT) && (O.getVal()<=Odometer.MAX))));
	}


}

	
	//Invariant ContaKm
	protected boolean invariant(IContaKm C){
		return((((C.getVal()>=IContaKm.INIT_VAL) && (C.getVal()<=IContaKm.LIMIT))));
	}
	
	//SetUp ContaKm
	protected void setUp() throws Exception{	//TODO: the project implementor must complete this statement
		Ckm = new ContaKm();					
	}
	//Create ContaKm
	public void testOnCreate(){
		assertTrue("testOnCreate",(invariant(Ckm) && Ckm.getVal()==IContaKm.INIT_VAL)); 
	}
	//Increment ContaKm
	public void testInc(){
		try {
			Ckm.inc();
			assertTrue("testInc",(invariant(Ckm) && Ckm.getVal()==IContaKm.INIT_VAL+1));
		} catch (Exception e) {
			fail("testInc" + e.getMessage());
		}
	}
	//Increment at limit ContaKm
	public void testAtLimit() {
		try {
			incAtLimit();
			Ckm.inc();
			assertTrue("testAtLimit",(Ckm.getVal()==IContaKm.INIT_VAL));
		} catch (Exception e) {
			fail("testAtLimit" + e.getMessage());
		}
	}
	
	protected void incAtLimit() {
			try {
				for(int i=1;i<=IContaKm.LIMIT;i++){
					Ckm.inc();
				}
				assertTrue("incAtLimit", invariant(Ckm));
			} catch (Exception e) {
				fail("incAtLimit"+ e.getMessage());
			}

	}
}