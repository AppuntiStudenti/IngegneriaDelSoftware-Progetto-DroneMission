ContactSystem DroneMissionSystem -awt -o;

//		Subsystems -w (window)
Subject smartphone -w;
Subject drone -w;
Subject headQuarter -w;


//		Messages
Dispatch photo;
Invitation command;
Signal dataSensor;
Signal notifyStartMission;
Signal notifyEndMission;


//		Highlevel communications
//Drone send photo
sendDataPhoto: drone forward photo to headQuarter;  
//Headquarter receive photo
receiveDataPhoto: headQuarter serve photo support=TCP [host="localhost" port=4060];

//Drone send data of sensors
sendDataSensors: drone emit dataSensor;
//Headquarter and Smartphone receive data of sensors
headquarterReceiveDataSensors: headQuarter sense dataSensor;
smartphoneReceiveDataSensors: smartphone sense dataSensor;

//Drone send startMission
sendNotifyStartMission: drone emit notifyStartMission;
//Smartphone receive notification of start mission
smartphoneReceiveNotifyStartMission: smartphone sense notifyStartMission;

//Drone send endMission
sendNotifyEndMission: drone emit notifyEndMission;
//Smartphone receive notification of start mission
smartphoneReceiveNotifyEndMission: smartphone sense notifyEndMission;

//HeadQuarter send command
sendCommand: headQuarter ask command to drone;
//Drone receive command
receiveCommand: drone accept command support=TCP [host="localhost" port=4050];


//		Behaviors 
//Behavior of Drone
BehaviorOf drone {
	var String msgCommand = ""
	var String cmdName = ""
	var String cmdValue = ""

	var boolean start
	var boolean stop
	var boolean speed

	var String dataSensors
	var String dataPhoto

	action void startMission()
	action void endMission()
	action void setSpeed()
	
	action String getDataFromSensors()
	action String getDataPhoto()

	state state_initDrone initial
		println ("----- Drone Initialized -----")
		goToState state_ready
	endstate
	
	state state_ready
		println ("----- Waiting setSpeed -----")
		doIn receiveCommand()
		set msgCommand = call curInputMsg.msgContent()
		set cmdName = call Drone.getCommandName(msgCommand)
		set start = call cmdName.contains("setspeed")
		if{start} {	goToState state_startMission }
		println ("ERROR: expected 'setspeed' command to start. Received: " + cmdName)
	endstate
	
	state state_startMission
		exec startMission() // empty method - maybe can be used in future?
		doOut sendNotifyStartMission("mission started")
		goToState state_setspeed
	endstate
	
	state state_setspeed
		exec setSpeed()
		goToState state_onMission
	endstate

	state state_onMission
		// send data sensors
		set dataSensors = exec getDataFromSensors()
		doOut sendDataSensors(dataSensors)

		// send photos
		set dataPhoto = exec getDataPhoto()
		doOut sendDataPhoto(dataPhoto) // every x secondi?

		// received a command setSpeed or stop?
		onMessage? command goToState state_commandHandler
	endstate

	state state_commandHandler
		doIn receiveCommand()
		set cmdName = call Drone.getCommandName(code.curInputMsgContent)
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
						
		// check if stop
		set stop = call cmdName.contains("stop")
		if {stop} { goToState state_endMission }
		
		// check if setspeed
		set speed = call cmdName.contains("setspeed")
		if {speed} { goToState state_setspeed }
		
		// get back on mission
		goToState state_onMission
	endstate
	
	state state_endMission
		exec endMission() // empty method - maybe can be used in future?
		doOut sendNotifyEndMission("stop mission")
		transitToEnd
	endstate
}

BehaviorOf headQuarter{
	
	var String command
	var String dataSensorsReceived
	var String photoReceived
	
	action String getCommandToSend()
	action void updateDashboard(String dataSensorsReceived)
	action void storePhotoData(String photoReceived)
	
	state state_initHeadQuarter initial
		println ("----- HeadQuarter Initialized -----") 
		goToState state_operative
	endstate
	
	state state_operative
		println ("----- Ready to send command -----")
		doOutIn sendCommand("setspeed 60")
		acquireAckFor command goToState state_mission
	endstate
	
	state state_mission
		// check if command is clicked in Dashboard and send it
		set command = exec getCommandToSend()
		doOutIn sendCommand(command)

		// get sensors data
		onMessage? dataSensor goToState state_receivedDataSensors
		
		// get photos
		onMessage? photo goToState state_receivedPhoto
		
	endstate
	
	state state_receivedDataSensors
		// get sensors data
		doPerceive headquarterReceiveDataSensors()
		set dataSensorsReceived = code.curInputMsgContent
		// update Dashboard
		call updateDashboard(dataSensorsReceived)

		goToState state_mission
	endstate
	
	state state_receivedPhoto
		// get photo data
		doIn receiveDataPhoto()
		set photoReceived = code.curInputMsgContent
		
		// store info
		call storePhotoData(photoReceived)
		
		goToState state_mission
	endstate
	
	state state_StopMission
		transitToEnd
	endstate
}

BehaviorOf smartphone {
	
	var String dataDroneReceived 
	
	action void notifyUserMissionStarted()
	action void showDataSensorsReceived(String data)
	action void missionFinished()
	
	state state_initSmartphone initial
		onMessage notifyStartMission transitTo state_missionStared
	endstate
	
	state state_missionStared
		call notifyUserMissionStarted()
		goToState state_receivingData
	endstate
	
	state state_receivingData
		onMessage? dataSensor goToState state_showReceivedData
		onMessage? notifyEndMission goToState state_missionEnding
	endstate
	
	state state_showReceivedData
		// get data from drone
		doPerceive smartphoneReceiveDataSensors()
		set dataDroneReceived = code.curInputMsgContent
		call showDataSensorsReceived(dataDroneReceived)

		goToState state_receivingData
	endstate
	
	state state_missionEnding
		call missionFinished()
		transitToEnd
	endstate
}
