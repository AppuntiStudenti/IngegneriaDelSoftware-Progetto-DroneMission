/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.IAcquireOneReply;
import it.unibo.is.interfaces.platforms.ILindaLike;
import java.util.Vector;

public class AcquireOneReply extends Thread implements IAcquireOneReply{
 protected String msgIn;
 protected ILindaLike core; 
 private IMessage replyMsg = null;
 private boolean debug = false;
 protected IOutputView view;
 protected boolean timeOutexpired = false;
 private Vector<IMessage> answers;
 private boolean goon = true;
 private boolean consumed = false;
 
	public AcquireOneReply( ILindaLike core, String msgIn, IOutputView view ){	
		this.core  = core;
		this.msgIn = msgIn;		 
		this.view  = view;
		answers = new Vector<IMessage>();
		if( System.getProperty("medclTrace") != null ) 
			debug = System.getProperty("medclTrace").equals("set") ;
		start();
	}

	public void run() {
  		while( goon ) {
			consumed = false;
			handleAnswer(); 
 		}
 		System.out.println("		*** AcquireOneReply " + msgIn + " ENDS");
	}
 
	protected synchronized void handleAnswer() {
		try {
			println("checking for msgIn=" + msgIn  ); 
 			replyMsg = core.in( msgIn );
			println("found " + replyMsg );
			notifyAll();
 	 	 	if( replyMsg.msgContent().contains("endOfAnswerSysMsg")) goon = false;
 			else while( ! consumed ) wait();
 		} catch (Exception e) {
			e.printStackTrace();
		}
	}
 
	public synchronized IMessage getReplyWaiting() throws Exception {
		//println(" ++++ getReplyWaiting " );
		IMessage myreplyMsg = null;
		while( replyMsg == null ){
				//println(" ++++ waits " );
	 			wait();
	 	}
	 	answers.add(replyMsg);
 	 	myreplyMsg = replyMsg;
 	 	replyMsg = null;	//to block the next acquireReply
		consumed = true;	//to unblock the in
		notifyAll();
		return myreplyMsg;
	}

	public boolean replyAvailable(){
		return replyMsg != null;
	}
	public IMessage acquireReply() throws Exception{
 		IMessage m = getReplyWaiting();
 		consumed = true;
		return m;
	}
	
	
	@Override
	public IMessage acquireReply(int timeOut) throws Exception{
		//Wait until timeout or reply
		new Timer(1, msgIn, answers.size(), timeOut);		
 		IMessage m = getReplyWaiting();
 		consumed = true;
		return m;
	}

	protected void println( String msg ){
 		String m = "	*%* AcquireOneReply "+ msgIn + " " + msg;
 		if( debug ) 
			 if( view != null )
				 view.addOutput( m );
			 else System.out.println(m);		
	}			
}
