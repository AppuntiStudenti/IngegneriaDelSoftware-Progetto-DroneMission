/*
*  Generated by AN Unibo
*/
package it.unibo.contact.DroneMissionSystem;
//Import generated by the contact spec
//Other Import
import it.unibo.contact.platformuv.*;
import it.unibo.is.interfaces.*;
import it.unibo.is.interfaces.platforms.*;
//import org.eclipse.xtext.xbase.lib.*;
//import org.eclipse.xtext.xbase.lib.Functions.*;
import java.util.Vector;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.protocols.IConnInteraction;
//import java.awt.Color;
//For Xbase code 
import org.eclipse.xtext.xbase.lib.Functions.*;
import org.eclipse.xtext.xbase.lib.*;
import it.unibo.baseEnv.basicFrame.EnvFrame;

public abstract class SmartphoneSupport extends Subject{
	private static Smartphone obj = null;
	private IMessage resCheckMsg;
	private boolean resCheck;
	/*
	* Factory method: returns a singleton
	*/
	public static Smartphone create(String name) throws Exception{
		if( obj == null ) obj = new Smartphone(name);
		return obj;
	}
	/* -------------------------------------
	* Local state of the subject
	* --------------------------------------
	*/
	protected int lastMsgNum = 0;
	
	
	//Constructor
	public SmartphoneSupport(String name) throws Exception{
		super(name);
	 	isMultiInput=true;
	 	inputMessageList=new String[]{"dataSensor","notifyStartMission","notifyEndMission", "endSelectInput"};
	 	initLastMsgRdMemo();  //put in initGui since the name must be set
		//Singleton
		if( obj != null ) return;
		 obj = (Smartphone)this;
	}
	
	/* -------------------------------------
	* Init
	* --------------------------------------
	*/
	//PREPARE INPUT THREADS
	public void initInputSupports() throws Exception{
	}
	
 	protected void initLastMsgRdMemo(){
 			lastMsgRdMemo.put("dataSensor"+getName(),0);
 			lastMsgRdMemo.put("notifyStartMission"+getName(),0);
 			lastMsgRdMemo.put("notifyEndMission"+getName(),0);
 	}
	protected void initGui(){
	    env = new EnvFrame( getName(), this, new java.awt.Color(151, 228, 255), java.awt.Color.black );
	    env.init();
	    env.writeOnStatusBar(getName() + " | SmartphoneSupport working ... ",14);
	    view = env.getOutputView();
	    initLastMsgRdMemo(); //put here since the name must be set
	 }
	
	/* -------------------------------------
	* State-based Behavior
	* -------------------------------------- 
	*/ 
	protected abstract void notifyUserMissionStarted() throws Exception;
	protected abstract void showDataSensorsReceived(java.lang.String data) throws Exception;
	protected abstract void missionFinished() throws Exception;
	/* --- USER DEFINED STATE ACTIONS --- */
	/* --- USER DEFINED TASKS --- */
	/* 
		Each state acquires some input and performs some action 
		Each state is mapped into a void method 
	*/
	//Variable behavior declarations
	protected 
	String dataDroneReceived = null;
	public  java.lang.String get_dataDroneReceived(){ return dataDroneReceived; }
	
	protected boolean endStateControl = false;
	protected String curstate ="st_Smartphone_init";
	protected void stateControl( ) throws Exception{
		boolean debugMode = System.getProperty("debugMode" ) != null;
	 		while( ! endStateControl ){
	 			//DEBUG 
	 			if(debugMode) debugNextState(); 
	 			//END DEBUG
			/* REQUIRES Java Compiler 1.7
			switch( curstate ){
				case "st_Smartphone_init" : st_Smartphone_init(); break; 
				case "st_Smartphone_missionStart" : st_Smartphone_missionStart(); break; 
				case "st_Smartphone_waitingForData" : st_Smartphone_waitingForData(); break; 
				case "st_Smartphone_receivedData" : st_Smartphone_receivedData(); break; 
				case "st_Smartphone_endMission" : st_Smartphone_endMission(); break; 
			}//switch	
			*/
			if( curstate.equals("st_Smartphone_init")){ st_Smartphone_init(); }
			else if( curstate.equals("st_Smartphone_missionStart")){ st_Smartphone_missionStart(); }
			else if( curstate.equals("st_Smartphone_waitingForData")){ st_Smartphone_waitingForData(); }
			else if( curstate.equals("st_Smartphone_receivedData")){ st_Smartphone_receivedData(); }
			else if( curstate.equals("st_Smartphone_endMission")){ st_Smartphone_endMission(); }
		}//while
		//DEBUG 
		//if( synch != null ) synch.add(getName()+" reached the end of stateControl loop"  );
	 	}
	 	protected void selectInput(boolean mostRecent, Vector<String> tempList) throws Exception{
		Vector<IMessage> queries=comSup.prepareInput(mostRecent,getName(),
				SysKb.getSyskb(),tempList.toArray(),InteractPolicy.nopolicy() );
		//showMsg("*** queries" + queries);
		curInputMsg = selectOneInput(mostRecent,queries);	
		curInputMsgContent = curInputMsg.msgContent();	
	}
	
	protected void st_Smartphone_missionStart()  throws Exception{
		
		notifyUserMissionStarted();curstate = "st_Smartphone_waitingForData"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Smartphone_waitingForData()  throws Exception{
		
		//[it.unibo.indigo.contact.impl.SignalImpl@764142f5 (name: dataSensor) (var: null), it.unibo.indigo.contact.impl.SignalImpl@36931f7a (name: notifyStartMission) (var: null), it.unibo.indigo.contact.impl.SignalImpl@74f79e93 (name: notifyEndMission) (var: null)] | dataSensor isSignal=true
		resCheckMsg = checkSignal("ANY","dataSensor",false);
		if(resCheckMsg != null){
			curstate = "st_Smartphone_receivedData";
			return;}
		//[it.unibo.indigo.contact.impl.SignalImpl@764142f5 (name: dataSensor) (var: null), it.unibo.indigo.contact.impl.SignalImpl@36931f7a (name: notifyStartMission) (var: null), it.unibo.indigo.contact.impl.SignalImpl@74f79e93 (name: notifyEndMission) (var: null)] | notifyEndMission isSignal=true
		resCheckMsg = checkSignal("ANY","notifyEndMission",false);
		if(resCheckMsg != null){
			curstate = "st_Smartphone_endMission";
			return;}
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Smartphone_receivedData()  throws Exception{
		
		inputMessageList=new String[]{  "dataSensor"  };
		curInputMsg=selectWithPriority(false, inputMessageList);
		curInputMsgContent = curInputMsg.msgContent();
		dataDroneReceived =curInputMsgContent;
		showDataSensorsReceived(dataDroneReceived);curstate = "st_Smartphone_waitingForData"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Smartphone_endMission()  throws Exception{
		
		missionFinished();/* --- TRANSITION TO NEXT STATE --- */
		resetCurVars();
		do_terminationState();
		endStateControl=true;
	}
	protected void st_Smartphone_init()  throws Exception{
		
		/* --- TRANSITION TO NEXT STATE --- */
		Vector<String> tempList=new Vector<String>();
		tempList.add("notifyStartMission");
		 		if( tempList.size()==0){
					resetCurVars();
					do_terminationState();
					endStateControl=true;
					return;
				}
		selectInput(false,tempList);
		if(curInputMsg.msgId().equals("notifyStartMission")){ 
		curstate = "st_Smartphone_missionStart";
		return;
		}//if curInputMsg notifyStartMission
	}
	
   	
 	/* -------------------------------------
	* COMMUNICATION CORE OPERATIONS for smartphone
	* --------------------------------------
	*/
 
	protected IMessage hl_smartphone_sense_dataSensor(   ) throws Exception {
	IMessage m = new Message("signal(ANYx1y2,dataSensor,M,N)");
	IMessage inMsg = comSup.rdw( getName() ,"dataSensor",  lastMsgRdMemo,m );
		return inMsg;
	
	}
	protected IMessage hl_smartphone_sense_dataSensor( boolean mostRecent  ) throws Exception {
	if( ! mostRecent) return hl_smartphone_sense_dataSensor ();
	else{
	IMessage m = new Message("signal(ANYx1y2,dataSensor,M,N)");
	IMessage inMsg = comSup.rdwMostRecent(getName() ,"dataSensor",  lastMsgRdMemo,m );
		return inMsg;
	}
	
	}
	
	protected IMessage hl_smartphone_sense_notifyStartMission(   ) throws Exception {
	IMessage m = new Message("signal(ANYx1y2,notifyStartMission,M,N)");
	IMessage inMsg = comSup.rdw( getName() ,"notifyStartMission",  lastMsgRdMemo,m );
		return inMsg;
	
	}
	protected IMessage hl_smartphone_sense_notifyStartMission( boolean mostRecent  ) throws Exception {
	if( ! mostRecent) return hl_smartphone_sense_notifyStartMission ();
	else{
	IMessage m = new Message("signal(ANYx1y2,notifyStartMission,M,N)");
	IMessage inMsg = comSup.rdwMostRecent(getName() ,"notifyStartMission",  lastMsgRdMemo,m );
		return inMsg;
	}
	
	}
	
	protected IMessage hl_smartphone_sense_notifyEndMission(   ) throws Exception {
	IMessage m = new Message("signal(ANYx1y2,notifyEndMission,M,N)");
	IMessage inMsg = comSup.rdw( getName() ,"notifyEndMission",  lastMsgRdMemo,m );
		return inMsg;
	
	}
	protected IMessage hl_smartphone_sense_notifyEndMission( boolean mostRecent  ) throws Exception {
	if( ! mostRecent) return hl_smartphone_sense_notifyEndMission ();
	else{
	IMessage m = new Message("signal(ANYx1y2,notifyEndMission,M,N)");
	IMessage inMsg = comSup.rdwMostRecent(getName() ,"notifyEndMission",  lastMsgRdMemo,m );
		return inMsg;
	}
	
	}
	
	
 	/* -------------------------------------
	* CONNECTION OPERATIONS for smartphone
	* --------------------------------------
	*/
	
	/* -------------------------------------
	* Local body of the subject
	* --------------------------------------
	*/
	
		public void doJob() throws Exception{ stateControl(); }
	 	//INSERTED FOR DEBUG
		protected boolean nextStep = false;
		protected String stateBreakpoint = null;
		protected Vector<String> synch;
		protected synchronized void debugNextState() throws Exception{
			if( stateBreakpoint != null && ! curstate.equals(stateBreakpoint) ) return;
			while( stateBreakpoint != null && curstate.equals(stateBreakpoint) ){
				showMsg(" stateBreakpoint reached "  +  stateBreakpoint);
				synch.add("stateBreakpoint reached " + stateBreakpoint);
				//showMsg("wait");
	 			wait();			
			}
	//		if( stateBreakpoint != null   ) { //resumed!
	// 	 	stateBreakpoint = null;
	//			return;
			}
	//		while( ! nextStep ) wait();
	//		if( stateBreakpoint != null ) debugNextState();
	//		else{
	//			showMsg("resume nextStep");
	//			synch.add("nextStep done");
	//			nextStep = false;
	//		}
	//	}
	//	public synchronized void nextStateStep(Vector<String> synch) throws Exception{
	//		showMsg("nextStateStep " + curstate );
	//		this.synch = synch;
	//		nextStep = true;
	//		notifyAll();
	//	}
		public synchronized void nextStateStep(String state, Vector<String> synch) throws Exception{
			this.synch = synch;
			stateBreakpoint = state;
			nextStep = true;
			showMsg("nextStateStep stateBreakpoint=" + stateBreakpoint );
	 		notifyAll();
		}
		//END INSERTED FOR DEBUG
			
		protected void do_terminationState() throws Exception {
			//showMsg(  " ---- END STATE LOOP ---- " );
		}
	
	protected IMessage acquire(String msgId) throws Exception{
	  //showMsg("acquire "  +  msgId ); 
	  IMessage m;
	  //USER MESSAGES
	 if( msgId.equals("endSelectInput")){
	  String ms = MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	    getName(), "endSelectInput", "ANYx1y2", "N");
	  //Serve the auto-dispatch
	  IMessage min = core.in(new Message(ms).toString());
	  return min;
	 }
	  throw new Exception("Wrong msgId:"+  msgId);
	}//acquire	
	
	/* -------------------------------------
	* Operations (from Java)
	* --------------------------------------
	*/
	
		
	/* -------------------------------------
	* Termination
	* --------------------------------------
	*/
	public void terminate() throws Exception{ //by EndSubjectConnections
	 			 //Auto-forward a dispatch to finish selectInput operations
	 		    String ms =
	 		      MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	 		       getName(), "endSelectInput", "endSelectInput", "0");
	 		    core.out(ms);
	if( synch != null ){
		synch.add(getName()+" reached the end of loop"  );
	}
	obj = null;
	//System.out.println(getName() + " terminated");
	}	
	// Teminate operations
}//SmartphoneSupport
