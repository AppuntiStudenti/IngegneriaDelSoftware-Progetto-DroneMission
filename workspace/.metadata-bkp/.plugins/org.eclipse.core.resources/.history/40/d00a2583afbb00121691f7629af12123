/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package it.unibo.gauge.interfaces.impl;

import it.unibo.gauge.interfaces.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InterfacesFactoryImpl extends EFactoryImpl implements InterfacesFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static InterfacesFactory init() {
		try {
			InterfacesFactory theInterfacesFactory = (InterfacesFactory)EPackage.Registry.INSTANCE.getEFactory("http:///it/unibo/gauge/interfaces.ecore"); 
			if (theInterfacesFactory != null) {
				return theInterfacesFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new InterfacesFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InterfacesFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case InterfacesPackage.ICONTROL_DASHBOARD: return createIControlDashboard();
			case InterfacesPackage.IDISPLAY: return createIDisplay();
			case InterfacesPackage.IFUEL_OMETER: return createIFuelOmeter();
			case InterfacesPackage.IGAUGE: return createIGauge();
			case InterfacesPackage.IGAUGE_ANALOGIC_DISPLAY: return createIGaugeAnalogicDisplay();
			case InterfacesPackage.IGAUGE_DIGITAL_DISPLAY: return createIGaugeDigitalDisplay();
			case InterfacesPackage.IGAUGE_DISPLAY: return createIGaugeDisplay();
			case InterfacesPackage.IGAUGE_MONOTONIC: return createIGaugeMonotonic();
			case InterfacesPackage.IGAUGE_VALUE: return createIGaugeValue();
			case InterfacesPackage.IGAUGE_VARIANT: return createIGaugeVariant();
			case InterfacesPackage.ILOC_TRACKER: return createILocTracker();
			case InterfacesPackage.IODOMETER: return createIOdometer();
			case InterfacesPackage.ISPEED_OMETER: return createISpeedOmeter();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case InterfacesPackage.EXCEPTION:
				return createExceptionFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case InterfacesPackage.EXCEPTION:
				return convertExceptionToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IControlDashboard createIControlDashboard() {
		IControlDashboardImpl iControlDashboard = new IControlDashboardImpl();
		return iControlDashboard;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IDisplay createIDisplay() {
		IDisplayImpl iDisplay = new IDisplayImpl();
		return iDisplay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IFuelOmeter createIFuelOmeter() {
		IFuelOmeterImpl iFuelOmeter = new IFuelOmeterImpl();
		return iFuelOmeter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGauge createIGauge() {
		IGaugeImpl iGauge = new IGaugeImpl();
		return iGauge;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeAnalogicDisplay createIGaugeAnalogicDisplay() {
		IGaugeAnalogicDisplayImpl iGaugeAnalogicDisplay = new IGaugeAnalogicDisplayImpl();
		return iGaugeAnalogicDisplay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeDigitalDisplay createIGaugeDigitalDisplay() {
		IGaugeDigitalDisplayImpl iGaugeDigitalDisplay = new IGaugeDigitalDisplayImpl();
		return iGaugeDigitalDisplay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeDisplay createIGaugeDisplay() {
		IGaugeDisplayImpl iGaugeDisplay = new IGaugeDisplayImpl();
		return iGaugeDisplay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeMonotonic createIGaugeMonotonic() {
		IGaugeMonotonicImpl iGaugeMonotonic = new IGaugeMonotonicImpl();
		return iGaugeMonotonic;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeValue createIGaugeValue() {
		IGaugeValueImpl iGaugeValue = new IGaugeValueImpl();
		return iGaugeValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGaugeVariant createIGaugeVariant() {
		IGaugeVariantImpl iGaugeVariant = new IGaugeVariantImpl();
		return iGaugeVariant;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ILocTracker createILocTracker() {
		ILocTrackerImpl iLocTracker = new ILocTrackerImpl();
		return iLocTracker;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IOdometer createIOdometer() {
		IOdometerImpl iOdometer = new IOdometerImpl();
		return iOdometer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ISpeedOmeter createISpeedOmeter() {
		ISpeedOmeterImpl iSpeedOmeter = new ISpeedOmeterImpl();
		return iSpeedOmeter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Exception createExceptionFromString(EDataType eDataType, String initialValue) {
		return (Exception)super.createFromString(eDataType, initialValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertExceptionToString(EDataType eDataType, Object instanceValue) {
		return super.convertToString(eDataType, instanceValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InterfacesPackage getInterfacesPackage() {
		return (InterfacesPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static InterfacesPackage getPackage() {
		return InterfacesPackage.eINSTANCE;
	}

} //InterfacesFactoryImpl
