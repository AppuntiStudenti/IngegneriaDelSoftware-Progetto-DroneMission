ContactSystem DroneMissionSystem -o spaceUpdater [host="localhost" port=7070];

Context subSystemDrone -w;
Context subSystemSmartDevice -w;
Context subSystemHeadQuarter -w;

//		Subsystems -w (window)
Subject smartdevice context subSystemSmartDevice;
Subject drone context subSystemDrone;
Subject headQuarter context subSystemHeadQuarter;


//		Messages
Dispatch photo;
Request command;
Signal sensorsData;
Signal notify;

//		Highlevel communications
//Drone sends photo
sendDataPhoto: drone forward photo to headQuarter;  
//Headquarter receives photo
receiveDataPhoto: headQuarter serve photo support=TCP [host="localhost" port=4060];

//Drone sends data of sensors
sendsensorsDatas: drone emit sensorsData;
//Headquarter and Smartdevice receive data of sensors
headquarterReceivesensorsDatas: headQuarter sense sensorsData;
smartdeviceReceivesensorsDatas: smartdevice sense sensorsData;

//Drone notifies start/end mission
sendnotify: drone emit notify;
//Smartdevice receives notifications about mission
smartdeviceReceiveNotify: smartdevice sense notify;

//HeadQuarter sends command
sendCommand: headQuarter demand command to drone;
//Drone receives command
receiveCommand: drone grant command support=TCP [host="localhost" port=4050];


//		Behaviors 
//Behavior of Drone
BehaviorOf drone {
	var String msgCommand = ""
	var String cmdName = ""
	var String cmdValue = ""

	var boolean stop
	var boolean cmdOk

	var String sensorsDatas
	var String dataPhoto
	
	action boolean executeCommand(String cmd, String v)
	action void startMission()
	action void endMission()
	action void setSpeed(String value)
	
	action String getDataFromSensors()
	action String getDataPhoto()

	state st_Drone_init initial
		println ("----- Drone Initialized -----")
		goToState st_Drone_ready
	endstate
	
	state st_Drone_ready
		println ("----- Waiting setSpeed -----")
		doInOut receiveCommand()
		set msgCommand = call curInputMsg.msgContent()
		set cmdName = call Drone.getCommandName(msgCommand)
		set cmdValue =  call Drone.getCommandValue(msgCommand)
		//get command response
		set cmdOk = call executeCommand(cmdName, cmdValue)
		//response to headquarter
		if{cmdOk} { replyToRequest command ("completed"); goToState st_Drone_startMission }
		if{!cmdOk} { replyToRequest command ("error") }
		println ("ERROR: expected 'setspeed' command to start. Received: " + cmdName)
	endstate
	
	state st_Drone_startMission
		println ("----- start mission -----")
		exec startMission() // empty method - maybe can be used in future?

		doOut sendnotify("start")

		goToState st_Drone_onMission
	endstate

//	state st_Drone_setspeed
//		println ("----- set speed -----")
//		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
//		set cmdOk = call executeCommand(cmdName, cmdValue)
//		if{cmdOk} { replyToRequest command ("completed") }
//		if{!cmdOk} { replyToRequest command ("error") }
//		exec setSpeed(cmdValue)
//		goToState st_Drone_onMission
//	endstate

	state st_Drone_onMission
		println ("----- on mission -----")
	
		// send data sensors
		set sensorsDatas = exec getDataFromSensors()
		//doOut sendsensorsDatas(sensorsDatas)

		// send photos
		set dataPhoto = exec getDataPhoto()
		//doOut sendDataPhoto(dataPhoto) // every x secondi?

		// received a command setSpeed or stop?
		onMessage? command goToState st_Drone_commandHandler
	endstate

	state st_Drone_commandHandler
		println("cmd handler")
		//receive command
		doInOut receiveCommand()
		//get name and value
		set cmdName = call Drone.getCommandName(code.curInputMsgContent)
		set cmdValue =  call Drone.getCommandValue(code.curInputMsgContent)
		//get command response
		set cmdOk = call executeCommand(cmdName, cmdValue)
		//response to headquarter
		if{cmdOk} { replyToRequest command ("completed") }
		if{!cmdOk} { replyToRequest command ("error") }

		//			
		// check if stop
		if {stop} { goToState st_Drone_endMission }
		
		// get back on mission
		goToState st_Drone_onMission
	endstate
	
	state st_Drone_endMission
		exec endMission() // empty method - maybe can be used in future?
		doOut sendnotify("end")
		transitToEnd
	endstate
}

BehaviorOf headQuarter{
	
	var String command
	var String sensorsDatasReceived
	var String photoReceived
	var String c=""
	var boolean response
	
	action String getCommandToSend()
	action void updateDashboard(String sensorsDatasReceived)
	action void storePhotoData(String photoReceived)
	
	state st_HeadQuarter_init initial
		println ("----- HeadQuarter Initialized -----") 
		goToState st_HeadQuarter_ready
	endstate
	
	state st_HeadQuarter_ready
		println ("----- Ready to send command -----")
		doOutIn sendCommand("setspeed 60")
		acquireAnswerFor command
		set c = call curReply.msgContent()
		println ("-- response received. value: " + c)
		set response = code.c.contains("completed") 
		if {response}{ goToState st_HeadQuarter_onMission } 	
	endstate
	
	state st_HeadQuarter_onMission
		println ("--- on mission ---")
		// check if command is clicked in Dashboard and send it
		set command = exec getCommandToSend()
		doOutIn sendCommand(command)
		acquireAnswerFor command
		set c = call curReply.msgContent()
		set response = code.c.contains("completed") 
		if {response}{ println ("Command executed") }
		if {!response}{ println ("Command aborted") }
		
		if {(command == "stop") && response } { goToState st_HeadQuarter_endMission }
		
		// get sensors data
		onMessage? sensorsData goToState st_HeadQuarter_receivedSensorsData
		
		// get photos
		onMessage? photo goToState st_HeadQuarter_receivedPhoto
		
	endstate
	
	state st_HeadQuarter_receivedSensorsData
		// get sensors data
		doPerceive headquarterReceivesensorsDatas()
		set sensorsDatasReceived = code.curInputMsgContent
		// update Dashboard
		call updateDashboard(sensorsDatasReceived)

		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_receivedPhoto
		// get photo data
		doIn receiveDataPhoto()
		set photoReceived = code.curInputMsgContent
		
		// store info
		call storePhotoData(photoReceived)
		
		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_endMission
		transitToEnd
	endstate
}

BehaviorOf smartdevice {
	
	var String notifyContent
	var String dataDroneReceived 
	
	action void notifyUserMissionStarted()
	action void showSensorsDatasReceived(String data)
	action void missionFinished()
	
	state st_Smartdevice_init initial
		onMessage notify transitTo st_Smartdevice_missionStart
	endstate
	
	state st_Smartdevice_missionStart
		call notifyUserMissionStarted()
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_waitingForData
		onMessage? sensorsData goToState st_Smartdevice_receivedData
		onMessage? notify goToState st_Smartdevice_endMission
	endstate
	
	state st_Smartdevice_receivedData
		// get data from drone
		doPerceive smartdeviceReceivesensorsDatas()
		set dataDroneReceived = code.curInputMsgContent
		call showSensorsDatasReceived(dataDroneReceived)

		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_notifyHandler
		doPerceive smartdeviceReceiveNotify()
		set notifyContent = code.curInputMsgContent
		if {notifyContent == "start"} { goToState st_Smartdevice_missionStart }
		if {notifyContent == "end" } { goToState st_Smartdevice_endMission }
		goToState st_Smartdevice_waitingForData
	endstate
	
	state st_Smartdevice_endMission
		call missionFinished()
		transitToEnd
	endstate
}
