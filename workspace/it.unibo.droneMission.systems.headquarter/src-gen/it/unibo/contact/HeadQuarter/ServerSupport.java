/*
*  Generated by AN Unibo
*/
package it.unibo.contact.HeadQuarter;
//Import generated by the contact spec
//Other Import
import it.unibo.contact.platformuv.*;
import it.unibo.is.interfaces.*;
import it.unibo.is.interfaces.platforms.*;
//import org.eclipse.xtext.xbase.lib.*;
//import org.eclipse.xtext.xbase.lib.Functions.*;
import java.util.Vector;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.protocols.IConnInteraction;
//import java.awt.Color;
//For Xbase code 
import org.eclipse.xtext.xbase.lib.Functions.*;
import org.eclipse.xtext.xbase.lib.*;

public abstract class ServerSupport extends Subject{
	private static Server obj = null;
	private IMessage resCheckMsg;
	private boolean resCheck;
	/*
	* Factory method: returns a singleton
	*/
	public static Server create(String name) throws Exception{
		if( obj == null ) obj = new Server(name);
		return obj;
	}
	/* -------------------------------------
	* Local state of the subject
	* --------------------------------------
	*/
	protected int lastMsgNum = 0;
	
	
	//Constructor
	public ServerSupport(String name) throws Exception{
		super(name);
	 	isMultiInput=true;
	 	inputMessageList=new String[]{"showMeMission","showMeSensorsData","showMePicturePackage","showMeNotifies","newCommand", "endSelectInput"};
	 	initLastMsgRdMemo();  //put in initGui since the name must be set
		//Singleton
		if( obj != null ) return;
		 obj = (Server)this;
	}
	
	/* -------------------------------------
	* Init
	* --------------------------------------
	*/
	//PREPARE INPUT THREADS
	public void initInputSupports() throws Exception{
	}
	
 	protected void initLastMsgRdMemo(){
 			lastMsgRdMemo.put("showMeMission"+getName(),0);
 			lastMsgRdMemo.put("showMeSensorsData"+getName(),0);
 			lastMsgRdMemo.put("showMePicturePackage"+getName(),0);
 			lastMsgRdMemo.put("showMeNotifies"+getName(),0);
 			lastMsgRdMemo.put("newCommand"+getName(),0);
 	}
	protected void initGui(){
		if( env != null ) view = env.getOutputView();
	    initLastMsgRdMemo(); //put here since the name must be set
	}
	
	/* -------------------------------------
	* State-based Behavior
	* -------------------------------------- 
	*/ 
   	
 	/* -------------------------------------
	* COMMUNICATION CORE OPERATIONS for server
	* --------------------------------------
	*/
 
	protected IMessageAndContext hl_server_grant_showMeMission(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeMission isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeMission", 
	"server_showMeMission(ANYx1y2,showMeMission,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMeSensorsData(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeSensorsData isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeSensorsData", 
	"server_showMeSensorsData(ANYx1y2,showMeSensorsData,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMePicturePackage(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMePicturePackage isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMePicturePackage", 
	"server_showMePicturePackage(ANYx1y2,showMePicturePackage,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMeNotifies(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeNotifies isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeNotifies", 
	"server_showMeNotifies(ANYx1y2,showMeNotifies,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_newCommand(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_newCommand isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"newCommand", 
	"server_newCommand(ANYx1y2,newCommand,M,N)" ); 
	return answer;
	
	}
	
	protected IAcquireOneReply hl_server_demand_forwardCommand_controlUnit( String M  ) throws Exception {
	//EXPERT for COMPOSED server_demand_forwardCommand_controlUnit isInput=false withAnswer=true applVisible=true
	M = MsgUtil.putInEnvelope(M);
	IAcquireOneReply answer = comSup.outIn(
	"controlUnit","forwardCommand",getName(), 
	"controlUnit_forwardCommand("+getName()+",forwardCommand,"+M+","+msgNum+")","server_controlUnit_forwardCommand(controlUnit,forwardCommand,M,"+msgNum+")" ); 
	msgNum++;return answer;
	
	}
	
	
 	/* -------------------------------------
	* CONNECTION OPERATIONS for server
	* --------------------------------------
	*/
	
	/* -------------------------------------
	* Local body of the subject
	* --------------------------------------
	*/
	
	public abstract void doJob() throws Exception;
	
	protected IMessage acquire(String msgId) throws Exception{
	  //showMsg("acquire "  +  msgId ); 
	  IMessage m;
	  //USER MESSAGES
	  if( msgId.equals("showMeMission")){
	  	curRequest = hl_server_grant_showMeMission();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMeSensorsData")){
	  	curRequest = hl_server_grant_showMeSensorsData();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMePicturePackage")){
	  	curRequest = hl_server_grant_showMePicturePackage();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMeNotifies")){
	  	curRequest = hl_server_grant_showMeNotifies();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("newCommand")){
	  	curRequest = hl_server_grant_newCommand();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	 if( msgId.equals("endSelectInput")){
	  String ms = MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	    getName(), "endSelectInput", "ANYx1y2", "N");
	  //Serve the auto-dispatch
	  IMessage min = core.in(new Message(ms).toString());
	  return min;
	 }
	  throw new Exception("Wrong msgId:"+  msgId);
	}//acquire	
	
	/* -------------------------------------
	* Operations (from Java)
	* --------------------------------------
	*/
	
		
	/* -------------------------------------
	* Termination
	* --------------------------------------
	*/
	public void terminate() throws Exception{ //by EndSubjectConnections
		serverDemand_forwardCommand_controlUnitEnd();serverGrant_showMeMissionEnd();
		serverGrant_showMeSensorsDataEnd();
		serverGrant_showMePicturePackageEnd();
		serverGrant_showMeNotifiesEnd();
		serverGrant_newCommandEnd();
	 			 //Auto-forward a dispatch to finish selectInput operations
	 		    String ms =
	 		      MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	 		       getName(), "endSelectInput", "endSelectInput", "0");
	 		    core.out(ms);
//	if( synch != null ){
//		synch.add(getName()+" reached the end of loop"  );
//	}
	obj = null;
	//System.out.println(getName() + " terminated");
	}	
	// Teminate operations
	protected void serverDemand_forwardCommand_controlUnitEnd() throws Exception{
	 		PlatformExpert.findOutSupportToEnd("server","forwardCommand",getName(),view );
		//showMsg("terminate serverDemand_forwardCommand_controlUnit");
	}	
	protected void serverGrant_showMeMissionEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeMission",view );
		//showMsg("terminate serverGrant_showMeMission");
	}
	protected void serverGrant_showMeSensorsDataEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeSensorsData",view );
		//showMsg("terminate serverGrant_showMeSensorsData");
	}
	protected void serverGrant_showMePicturePackageEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMePicturePackage",view );
		//showMsg("terminate serverGrant_showMePicturePackage");
	}
	protected void serverGrant_showMeNotifiesEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeNotifies",view );
		//showMsg("terminate serverGrant_showMeNotifies");
	}
	protected void serverGrant_newCommandEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"newCommand",view );
		//showMsg("terminate serverGrant_newCommand");
	}
}//ServerSupport
