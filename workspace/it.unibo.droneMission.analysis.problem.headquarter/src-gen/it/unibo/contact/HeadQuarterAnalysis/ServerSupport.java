/*
*  Generated by AN Unibo
*/
package it.unibo.contact.HeadQuarterAnalysis;
//Import generated by the contact spec
//Other Import
import it.unibo.contact.platformuv.*;
import it.unibo.is.interfaces.*;
import it.unibo.is.interfaces.platforms.*;
//import org.eclipse.xtext.xbase.lib.*;
//import org.eclipse.xtext.xbase.lib.Functions.*;
import java.util.Vector;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.protocols.IConnInteraction;
//import java.awt.Color;
//For Xbase code 
import org.eclipse.xtext.xbase.lib.Functions.*;
import org.eclipse.xtext.xbase.lib.*;

public abstract class ServerSupport extends Subject{
	private static Server obj = null;
	private IMessage resCheckMsg;
	private boolean resCheck;
	/*
	* Factory method: returns a singleton
	*/
	public static Server create(String name) throws Exception{
		if( obj == null ) obj = new Server(name);
		return obj;
	}
	/* -------------------------------------
	* Local state of the subject
	* --------------------------------------
	*/
	protected int lastMsgNum = 0;
	
	
	//Constructor
	public ServerSupport(String name) throws Exception{
		super(name);
	 	isMultiInput=true;
	 	inputMessageList=new String[]{"showMeMission","showMeSensorsData","showMePicturePackage","showMeNotifies","newCommand", "endSelectInput"};
	 	initLastMsgRdMemo();  //put in initGui since the name must be set
		//Singleton
		if( obj != null ) return;
		 obj = (Server)this;
	}
	
	/* -------------------------------------
	* Init
	* --------------------------------------
	*/
	//PREPARE INPUT THREADS
	public void initInputSupports() throws Exception{
	}
	
 	protected void initLastMsgRdMemo(){
 			lastMsgRdMemo.put("showMeMission"+getName(),0);
 			lastMsgRdMemo.put("showMeSensorsData"+getName(),0);
 			lastMsgRdMemo.put("showMePicturePackage"+getName(),0);
 			lastMsgRdMemo.put("showMeNotifies"+getName(),0);
 			lastMsgRdMemo.put("newCommand"+getName(),0);
 	}
	protected void initGui(){
		if( env != null ) view = env.getOutputView();
	    initLastMsgRdMemo(); //put here since the name must be set
	}
	
	/* -------------------------------------
	* State-based Behavior
	* -------------------------------------- 
	*/ 
	protected abstract java.lang.String showReplyToCommand(java.lang.String reply) throws Exception;
	protected abstract java.lang.String getSensorsData(java.lang.String mission_id) throws Exception;
	protected abstract java.lang.String getPicturePackage(java.lang.String mission_id) throws Exception;
	protected abstract java.lang.String getNotifies(java.lang.String mission_id) throws Exception;
	protected abstract java.lang.String getMission(java.lang.String mission_id) throws Exception;
	/* --- USER DEFINED STATE ACTIONS --- */
	/* --- USER DEFINED TASKS --- */
	/* 
		Each state acquires some input and performs some action 
		Each state is mapped into a void method 
	*/
	//Variable behavior declarations
	protected 
	String command = null;
	protected 
	String reply = null;
	protected 
	String sensorsData = null;
	protected 
	String picturePackage = null;
	protected 
	String mission = null;
	public  java.lang.String get_command(){ return command; }
	public  java.lang.String get_reply(){ return reply; }
	public  java.lang.String get_sensorsData(){ return sensorsData; }
	public  java.lang.String get_picturePackage(){ return picturePackage; }
	public  java.lang.String get_mission(){ return mission; }
	
	protected boolean endStateControl = false;
	protected String curstate ="st_Server_init";
	protected void stateControl( ) throws Exception{
		boolean debugMode = System.getProperty("debugMode" ) != null;
	 		while( ! endStateControl ){
	 			//DEBUG 
	 			if(debugMode) debugNextState(); 
	 			//END DEBUG
			/* REQUIRES Java Compiler 1.7
			switch( curstate ){
				case "st_Server_init" : st_Server_init(); break; 
				case "st_Server_Handler" : st_Server_Handler(); break; 
				case "st_Server_showMission" : st_Server_showMission(); break; 
				case "st_Server_showPicturePackage" : st_Server_showPicturePackage(); break; 
				case "st_Server_showSensorsData" : st_Server_showSensorsData(); break; 
				case "st_Server_forwardCommand" : st_Server_forwardCommand(); break; 
			}//switch	
			*/
			if( curstate.equals("st_Server_init")){ st_Server_init(); }
			else if( curstate.equals("st_Server_Handler")){ st_Server_Handler(); }
			else if( curstate.equals("st_Server_showMission")){ st_Server_showMission(); }
			else if( curstate.equals("st_Server_showPicturePackage")){ st_Server_showPicturePackage(); }
			else if( curstate.equals("st_Server_showSensorsData")){ st_Server_showSensorsData(); }
			else if( curstate.equals("st_Server_forwardCommand")){ st_Server_forwardCommand(); }
		}//while
		//DEBUG 
		//if( synch != null ) synch.add(getName()+" reached the end of stateControl loop"  );
	 	}
	 	protected void selectInput(boolean mostRecent, Vector<String> tempList) throws Exception{
		Vector<IMessage> queries=comSup.prepareInput(mostRecent,getName(),
				SysKb.getSyskb(),tempList.toArray(),InteractPolicy.nopolicy() );
		//showMsg("*** queries" + queries);
		curInputMsg = selectOneInput(mostRecent,queries);	
		curInputMsgContent = curInputMsg.msgContent();	
	}
	
	protected void st_Server_Handler()  throws Exception{
		
		//[it.unibo.indigo.contact.impl.SignalImpl@32f25aa8 (name: sensorsData) (var: null), it.unibo.indigo.contact.impl.SignalImpl@2dd4f822 (name: notify) (var: null)] | newCommand isSignal=false
		resCheck = checkForMsg(getName(),"newCommand",null);
		if(resCheck){
			curstate = "st_Server_forwardCommand";
			return;}
		//[it.unibo.indigo.contact.impl.SignalImpl@32f25aa8 (name: sensorsData) (var: null), it.unibo.indigo.contact.impl.SignalImpl@2dd4f822 (name: notify) (var: null)] | showMeMission isSignal=false
		resCheck = checkForMsg(getName(),"showMeMission",null);
		if(resCheck){
			curstate = "st_Server_showMission";
			return;}
		//[it.unibo.indigo.contact.impl.SignalImpl@32f25aa8 (name: sensorsData) (var: null), it.unibo.indigo.contact.impl.SignalImpl@2dd4f822 (name: notify) (var: null)] | showMePicturePackage isSignal=false
		resCheck = checkForMsg(getName(),"showMePicturePackage",null);
		if(resCheck){
			curstate = "st_Server_showPicturePackage";
			return;}
		//[it.unibo.indigo.contact.impl.SignalImpl@32f25aa8 (name: sensorsData) (var: null), it.unibo.indigo.contact.impl.SignalImpl@2dd4f822 (name: notify) (var: null)] | showMeSensorsData isSignal=false
		resCheck = checkForMsg(getName(),"showMeSensorsData",null);
		if(resCheck){
			curstate = "st_Server_showSensorsData";
			return;}
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Server_showMission()  throws Exception{
		
		 curRequest=hl_server_grant_showMeMission();
		 curInputMsg= curRequest.getReceivedMessage();
		 curInputMsgContent = curInputMsg.msgContent();
		mission =getMission( curInputMsgContent ) ;
		curRequest.replyToCaller( mission ); 
		curstate = "st_Server_Handler"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Server_showPicturePackage()  throws Exception{
		
		 curRequest=hl_server_grant_showMePicturePackage();
		 curInputMsg= curRequest.getReceivedMessage();
		 curInputMsgContent = curInputMsg.msgContent();
		picturePackage =getPicturePackage( curInputMsgContent ) ;
		curRequest.replyToCaller( picturePackage ); 
		curstate = "st_Server_Handler"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Server_showSensorsData()  throws Exception{
		
		 curRequest=hl_server_grant_showMeSensorsData();
		 curInputMsg= curRequest.getReceivedMessage();
		 curInputMsgContent = curInputMsg.msgContent();
		sensorsData =getSensorsData( curInputMsgContent ) ;
		curRequest.replyToCaller( sensorsData ); 
		curstate = "st_Server_Handler"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Server_forwardCommand()  throws Exception{
		
		 curRequest=hl_server_grant_newCommand();
		 curInputMsg= curRequest.getReceivedMessage();
		 curInputMsgContent = curInputMsg.msgContent();
		command =curInputMsgContent;
		curAcquireOneReply=hl_server_demand_forwardCommand_controlUnit( command);
		curReply=curAcquireOneReply.acquireReply();
		curReplyContent = curReply.msgContent();
		reply =curInputMsgContent;
		showReplyToCommand( reply );curstate = "st_Server_Handler"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	protected void st_Server_init()  throws Exception{
		
		curstate = "st_Server_Handler"; 
		//resetCurVars(); //leave the current values on
		return;
		/* --- TRANSITION TO NEXT STATE --- */
	}
	
   	
 	/* -------------------------------------
	* COMMUNICATION CORE OPERATIONS for server
	* --------------------------------------
	*/
 
	protected IMessageAndContext hl_server_grant_showMeMission(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeMission isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeMission", 
	"server_showMeMission(ANYx1y2,showMeMission,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMeSensorsData(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeSensorsData isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeSensorsData", 
	"server_showMeSensorsData(ANYx1y2,showMeSensorsData,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMePicturePackage(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMePicturePackage isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMePicturePackage", 
	"server_showMePicturePackage(ANYx1y2,showMePicturePackage,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_showMeNotifies(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_showMeNotifies isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"showMeNotifies", 
	"server_showMeNotifies(ANYx1y2,showMeNotifies,M,N)" ); 
	return answer;
	
	}
	
	protected IMessageAndContext hl_server_grant_newCommand(   ) throws Exception {
	//EXPERT for COMPOSED server_grant_newCommand isInput=true withAnswer=true applVisible=true
	IMessageAndContext answer = comSup.inOut(
	getName() ,"newCommand", 
	"server_newCommand(ANYx1y2,newCommand,M,N)" ); 
	return answer;
	
	}
	
	protected IAcquireOneReply hl_server_demand_forwardCommand_controlUnit( String M  ) throws Exception {
	//EXPERT for COMPOSED server_demand_forwardCommand_controlUnit isInput=false withAnswer=true applVisible=true
	M = MsgUtil.putInEnvelope(M);
	IAcquireOneReply answer = comSup.outIn(
	"controlUnit","forwardCommand",getName(), 
	"controlUnit_forwardCommand("+getName()+",forwardCommand,"+M+","+msgNum+")","server_controlUnit_forwardCommand(controlUnit,forwardCommand,M,"+msgNum+")" ); 
	msgNum++;return answer;
	
	}
	
	
 	/* -------------------------------------
	* CONNECTION OPERATIONS for server
	* --------------------------------------
	*/
	
	/* -------------------------------------
	* Local body of the subject
	* --------------------------------------
	*/
	
		public void doJob() throws Exception{ stateControl(); }
	 	//INSERTED FOR DEBUG
		protected boolean nextStep = false;
		protected String stateBreakpoint = null;
		protected Vector<String> synch;
		protected synchronized void debugNextState() throws Exception{
			if( stateBreakpoint != null && ! curstate.equals(stateBreakpoint) ) return;
			while( stateBreakpoint != null && curstate.equals(stateBreakpoint) ){
				showMsg(" stateBreakpoint reached "  +  stateBreakpoint);
				synch.add("stateBreakpoint reached " + stateBreakpoint);
				//showMsg("wait");
	 			wait();			
			}
	//		if( stateBreakpoint != null   ) { //resumed!
	// 	 	stateBreakpoint = null;
	//			return;
			}
	//		while( ! nextStep ) wait();
	//		if( stateBreakpoint != null ) debugNextState();
	//		else{
	//			showMsg("resume nextStep");
	//			synch.add("nextStep done");
	//			nextStep = false;
	//		}
	//	}
	//	public synchronized void nextStateStep(Vector<String> synch) throws Exception{
	//		showMsg("nextStateStep " + curstate );
	//		this.synch = synch;
	//		nextStep = true;
	//		notifyAll();
	//	}
		public synchronized void nextStateStep(String state, Vector<String> synch) throws Exception{
			this.synch = synch;
			stateBreakpoint = state;
			nextStep = true;
			showMsg("nextStateStep stateBreakpoint=" + stateBreakpoint );
	 		notifyAll();
		}
		//END INSERTED FOR DEBUG
			
		protected void do_terminationState() throws Exception {
			//showMsg(  " ---- END STATE LOOP ---- " );
		}
	
	protected IMessage acquire(String msgId) throws Exception{
	  //showMsg("acquire "  +  msgId ); 
	  IMessage m;
	  //USER MESSAGES
	  if( msgId.equals("showMeMission")){
	  	curRequest = hl_server_grant_showMeMission();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMeSensorsData")){
	  	curRequest = hl_server_grant_showMeSensorsData();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMePicturePackage")){
	  	curRequest = hl_server_grant_showMePicturePackage();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("showMeNotifies")){
	  	curRequest = hl_server_grant_showMeNotifies();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	  if( msgId.equals("newCommand")){
	  	curRequest = hl_server_grant_newCommand();
	  	m = curRequest.getReceivedMessage();
	  	return m;		
	  }
	 if( msgId.equals("endSelectInput")){
	  String ms = MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	    getName(), "endSelectInput", "ANYx1y2", "N");
	  //Serve the auto-dispatch
	  IMessage min = core.in(new Message(ms).toString());
	  return min;
	 }
	  throw new Exception("Wrong msgId:"+  msgId);
	}//acquire	
	
	/* -------------------------------------
	* Operations (from Java)
	* --------------------------------------
	*/
	
		
	/* -------------------------------------
	* Termination
	* --------------------------------------
	*/
	public void terminate() throws Exception{ //by EndSubjectConnections
		serverDemand_forwardCommand_controlUnitEnd();serverGrant_showMeMissionEnd();
		serverGrant_showMeSensorsDataEnd();
		serverGrant_showMePicturePackageEnd();
		serverGrant_showMeNotifiesEnd();
		serverGrant_newCommandEnd();
	 			 //Auto-forward a dispatch to finish selectInput operations
	 		    String ms =
	 		      MsgUtil.bm(MsgUtil.channelInWithPolicy(InteractPolicy.nopolicy(),getName(), "endSelectInput"), 
	 		       getName(), "endSelectInput", "endSelectInput", "0");
	 		    core.out(ms);
	if( synch != null ){
		synch.add(getName()+" reached the end of loop"  );
	}
	obj = null;
	//System.out.println(getName() + " terminated");
	}	
	// Teminate operations
	protected void serverDemand_forwardCommand_controlUnitEnd() throws Exception{
	 		PlatformExpert.findOutSupportToEnd("server","forwardCommand",getName(),view );
		//showMsg("terminate serverDemand_forwardCommand_controlUnit");
	}	
	protected void serverGrant_showMeMissionEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeMission",view );
		//showMsg("terminate serverGrant_showMeMission");
	}
	protected void serverGrant_showMeSensorsDataEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeSensorsData",view );
		//showMsg("terminate serverGrant_showMeSensorsData");
	}
	protected void serverGrant_showMePicturePackageEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMePicturePackage",view );
		//showMsg("terminate serverGrant_showMePicturePackage");
	}
	protected void serverGrant_showMeNotifiesEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"showMeNotifies",view );
		//showMsg("terminate serverGrant_showMeNotifies");
	}
	protected void serverGrant_newCommandEnd() throws Exception{
	 	PlatformExpert.findInSupportToEnd(getName(),"newCommand",view );
		//showMsg("terminate serverGrant_newCommand");
	}
}//ServerSupport
