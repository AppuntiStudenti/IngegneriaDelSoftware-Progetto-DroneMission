/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
//import it.unibo.contact.platform.Activator;

import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.ILindaLike;

import it.unibo.is.interfaces.protocols.IConnInteraction;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.IPolicy;

import java.util.Vector;

public class PlatformExpert{
	
	protected static boolean tcpJarLoaded = false;

	private static boolean debug = 
		( System.getProperty("medclTrace") != null ) ?
		System.getProperty("medclTrace").equals("set") : false ;
    private static final String path = "file:" +
		(( System.getProperty("libPath") != null ) ? 
	    System.getProperty("libPath") : "lib/bundles/" );
	
/* 
 * ==================================================
 * High level OUT support    
 * ==================================================
*/
	public static ILindaLike findOutSupport(
			String receiver,String msgId,String sender,IOutputView view) throws Exception{
		
		//1 - The receiver has defined a protocol specific port
		if( RunTimeKb.worksWithConnProtocol( receiver, msgId) ){
			ILindaLike sup = RunTimeKb.getSubjectOutConnSupport(sender, receiver+msgId);
			if( sup != null ){
				println(view,"findOutSupport has found a specific out support for " + receiver+msgId);
				return sup;
			}						
			//create a new outSupport if not already available for that port
			return //createOutSupport(receiver, msgId, sender,view);
			SupportFactory.createOutSupport(receiver, msgId, sender,view);
		}
		//2 - A connection is set
		ILindaLike sup = getProtocolOutSupport(receiver, msgId, sender,view);
		if( sup != null ) return sup;
		//3 - DEFAULT
		println(view,"findOutSupport COMMON MEMORY for " + receiver+msgId );
		return getDefaultSupport(view);
 	}
 	 
	protected static ILindaLike getProtocolOutSupport(			
			final String receiver,String msgId, final String sender, final IOutputView view) throws Exception{
		checkLoadJar(tcpJarLoaded, Consts.tcpBasicJar);
		//1. Look if there is a specific connection active with the receiver for msgId (in subjConn)
		//2 - CONNECTION between the sender and the receiver (in connChannel)
		ILindaLike outToConnDestSup = RunTimeKb.getSubjectConnectionSupport( sender+receiver+"conn" );  
		if( outToConnDestSup != null ){
			println(view, "getProtocolOutSupport for caller  has found OUT connection to " + receiver );
			return outToConnDestSup;
		}
		//3. Look if the msg is setConnChannel and there is NO connection active with the receiver (in connChannel)
		if( msgId.equals("setConnChannel") ){
			//SITE of the sender (subject asking the connection)
			//Sender --> Receiver (with port)
			final ILindaLike outSupport = SupportFactory.createConnOut( receiver, msgId, sender, view);
   		    RunTimeKb.addSubjectConnectionSupport( sender+receiver+"conn", outSupport, view ); 	
   		    //Activate a thread to wait for the connection when set
			return outSupport;
		}
		
 		return null;		
	}

	//Create a new output support
//	protected static ILindaLike createOutSupport(String receiver,String msgId, String sender, IOutputView view) throws Exception{
//		if( RunTimeKb.worksWith( "TCP", receiver, msgId) ){
//			println(view,"createOutSupport create a new TCP output support for " + receiver+msgId + " in " + sender);		
//			ILindaLike tcpS = SupportFactory.createTCPOut(receiver, msgId, sender,view);
//	 		RunTimeKb.addSubjectOutConnSupport(sender, receiver+msgId, tcpS );
//			return tcpS;				
//		}else throw new Exception("Protocol unknown");
//	} 
 
 	public static void findOutSupportToEnd(
			String receiver,String msgId,String sender,IOutputView view) throws Exception{
		ILindaLike support = RunTimeKb.getSubjectOutConnSupport(sender,receiver+msgId);
		if( support != null ){
			doprintln(view,"PlatformExpert terminates "+support);
			support.terminate();
		}
 	}
  
/* 
* ==================================================
* High level IN support    
* ==================================================
*/ 	
	public static ILindaLike findInSupport(
			String receiver,String msgId, boolean withAnswer,IOutputView view ) throws Exception{
 		//1 - The receiver has defined a protocol connection port
		if( RunTimeKb.worksWithConnProtocol( receiver, msgId) )
			return //createInSupport(receiver, msgId, withAnswer,view);
			SupportFactory.createInSupport(receiver, msgId, withAnswer,view);
		//2 - A connection is set
		ILindaLike sup = getProtocolInSupport(receiver, msgId, withAnswer,view);
		if( sup != null ) return sup;
 		//3 - DEFAULT
		println(view,"findInSupport COMMON MEMORY  " );
		return getDefaultSupport(view);
 	}


	protected static ILindaLike getProtocolInSupport( 
			String receiver,String msgId, boolean withAnswer,IOutputView view ) throws Exception{
		//checkLoadJar(tcpJarLoaded, Consts.tcpBasicJar);
 		//1. Look if there is a specific connection active for the receiver for msgId (in subjConn)
 		//2. Look if there is a connection (in connChannel)
		ILindaLike sup = RunTimeKb.getSubjectConnectionSupport( receiver   );  
		if( sup != null ){	//Esiste giˆ una connessione da una richiesta TCP (ReceiverTcpRequest.chSet=setConnChannel)
			//inject knowledge
			ConnReceiver.setInputMsg(msgId, withAnswer);
			println(view,"getProtocolInSupport has found input connection for " + receiver+msgId );			
  			return  getDefaultSupport(view);
		}
		return null;
	}

//	protected static ILindaLike createInSupport(
//				String receiver,String msgId, boolean withAnswer,IOutputView view ) throws Exception{
//		if( RunTimeKb.worksWith( "TCP", receiver, msgId) ){
//	 		//println(view,"createInSupport create a new TCP input for " + receiver+msgId );
//			ILindaLike tcpS  = SupportFactory.createTCPIn(receiver, msgId, withAnswer,view);
// 			return tcpS;				
//		}else throw new Exception("Protocol unknown");
//	}

	public static void findInSupportToEnd(
			String receiver,String msgId, IOutputView view ) throws Exception{
		ConnProtIn support = RunTimeKb.getSubjectInConnSupport(receiver,receiver+msgId);
		if( support != null ){
			view.addOutput(receiver+ " terminate input agent for " + receiver + "::" + msgId);
			support.terminate();
 		}
		//Terminate the input connection port support
		ILindaLike conn = RunTimeKb.getSubjectConnectionSupport( receiver );
		if( conn != null ) conn.terminate(); 
 	}

/* 
* ==================================================
* High level IN support for signals
* ==================================================
*/ 		
	public static ILindaLike findInSignalSupport(
			String receiver, String msgId, boolean withAnswer,IOutputView view ) throws Exception{
        //isDistributed=false 
return getDefaultSupport(view);
	}
  
 
	

/* 
* ==================================================
* DEFAULT support  
* ==================================================
*/ 
 	protected static ILindaLike getDefaultSupport(IOutputView view){
		return LindaLike.getSpace();
	}
	

/* 
* ==================================================
* UTILS
* ==================================================
*/	
	
	public static  boolean checkMode( 
		String mode, String workerName, String receiverName )throws Exception{
		return LindaLike.getSpace().rd( 
			0, "bookedBy("+receiverName+","+workerName+")" ) != null;
	}		

	protected static void checkLoadJar(boolean state, String jarName){
		if( System.getProperty("osgiContext") != null && ! state){
//			MsgUtil.loadBundle(Activator.getContext(), path + jarName);	
			tcpJarLoaded = true;
		}
	}
	
	protected static void doprintln( IOutputView view, String msg ){
	String outMsg = "	%%% PlatformExpert " +  msg;
 			 if( view != null )
				 view.addOutput(outMsg);
			 else System.out.println( outMsg  );		
	}

	protected static void println( IOutputView view, String msg ){
		 if( debug ) 
			 doprintln(view, msg);
	}
	
}
