/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import it.unibo.is.interfaces.platforms.ILindaLike;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.platforms.IMessageAndContext;
import alice.tuprolog.*;

public class MessageAndContext implements IMessageAndContext{
 private IMessage msgIn;
 private String WorkerName;
 private ILindaLike core;
	
	public MessageAndContext(ILindaLike core, IMessage msgIn, String WorkerName ){
		this.core = core;
		this.msgIn = msgIn;
		this.WorkerName = WorkerName;
 	}
	
	 public void replyToCaller(String answerMsg) throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
	 //The answerMsg (like any other msg content) must be structured as a term (AN Jun2012)
	 	answerMsg = MsgUtil.putInEnvelope(answerMsg);
     	//TOREMOVE answerMsg = alice.tuprolog.Term.createTerm("envelope('"+ answerMsg.replace("'", "\"") +" ')").toString(); //Check the syntax 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
	 //System.out.println("replyToCaller " + outMsg);
		core.out(  outMsg   );
		String endMsg = bm( channelId ,WorkerName, msgIn.msgId(), "endOfAnswerSysMsg" , msgIn.msgNum());
		core.out(  endMsg   );	 
	 }
	 
	 public synchronized void replyContentToCaller(String path) throws Exception{
   		//This is an answer to be put as Prolog term
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 		 String outMsg = bm( channelId ,WorkerName, msgIn.msgId(), "path('"+path+"')" , msgIn.msgNum());
 		 //see SocketHttpConnSupport
 		 core.out(  outMsg   );
  	 }
	 public synchronized void replyStepToCaller(String answerMsg) throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
	 //The answerMsg (like any other msg content) must be structured as a term (AN Jun2012)
		answerMsg = MsgUtil.putInEnvelope(answerMsg);
     	//TOREMOVE answerMsg = alice.tuprolog.Term.createTerm("envelope('"+ answerMsg.replace("'", "\"") +" ')").toString(); //Check the syntax 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
	 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
		 //System.out.println("replyToCaller " + outMsg);
			core.out(  outMsg   );	
	 }
	 public synchronized void replyEndToCaller() throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
	 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), "endOfAnswerSysMsg" , msgIn.msgNum());
		 //System.out.println("replyToCaller " + outMsg);
			core.out(  outMsg   );	
	 }

 	 public IMessage getReceivedMessage(){
	 	return msgIn;
	 }
	 	 
	protected String channel3( String a1, String a2, String a3  ){
		return a1+"_"+a2+"_"+a3;
	}	

	protected String bm( String channelId, String workerName, 
		String msgId, String content, String msgNum  ){
		return channelId+"("+workerName+" , "+msgId+" , "+content+" , "+msgNum+")";
	}	
}	

