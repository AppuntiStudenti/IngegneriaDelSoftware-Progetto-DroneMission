ContactSystem ControlUnit -awt -o spaceUpdater [host="localhost" port=8070];

Context subSystemDrone -w;
Context subSystemHeadQuarter -w;
Context subSystemSmartDevice -w;

//		Subsystems -w (window)
Subject smartdevice context subSystemSmartDevice external;
Subject drone context subSystemDrone external;
Subject headQuarter context subSystemHeadQuarter;

Subject storage context subSystemHeadQuarter;
Subject uiLog context subSystemHeadQuarter;
Subject uiCommand context subSystemHeadQuarter;
Subject droneHandler context subSystemHeadQuarter;

//		Messages
Dispatch photo; 
Request command;
Signal sensorsData;
Signal notify;

// User messages
Request showMeMission;
Request showMeSensorsData;
Request showMePackagePhoto;
Request sendCommand;

//		Highlevel communications
//Drone sends photo
sendDataPhoto: drone forward photo to headQuarter;  
//Headquarter receives photo
receiveDataPhoto: headQuarter serve photo support=TCP [host="localhost" port=4060];

//Drone sends data of sensors
sendsensorsDatas: drone emit sensorsData;
//Headquarter and smartdevice receive data of sensors
headquarterReceivesensorsDatas: headQuarter sense sensorsData;
smartdeviceReceivesensorsDatas: smartdevice sense sensorsData;

//Drone notifies start/end mission
sendnotify: drone emit notify;
//smartdevice receives notifications about mission
smartdeviceReceiveNotify: smartdevice sense notify;

//HeadQuarter sends command
sendCommand: headQuarter demand command to drone;
//Drone receives command
receiveCommand: drone grant command support=TCP [host="localhost" port=4050];

// User communication
// show me something
sendShowMeMission: uiLog demand showMeMission to storage;
receiveShowMeMission: storage grant showMeMission;

sendShowMeSensorsData: uiLog demand showMeSensorsData to storage;
receiveShowMeSensorsData: storage grant showMeSensorsData;

sendShowMePackagePhoto: uiLog demand showMePackagePhoto to storage;
receiveShowMePackagePhoto: storage grant showMePackagePhoto;

// send command
sendSendCommand: uiCommand demand sendCommand to storage;
receiveSendCommand: storage grant sendCommand;


BehaviorOf headQuarter{
	
	var String command
	var String sensorsDatasReceived
	var String photoReceived
	var String commandAnswer
	
	action String getCommandToSend()
	action void updateDashboard(String sensorsDatasReceived)
	action void storePhotoData(String photoReceived)
	action void shutdown()
	
	state st_HeadQuarter_init initial
		println ("----- HeadQuarter Initialized -----") 
		goToState st_HeadQuarter_ready
	endstate
	
	state st_HeadQuarter_ready
		println ("----- Ready to send command -----")
		doOutIn sendCommand("setspeed 60")
		acquireAnswerFor command
		set commandAnswer = code.curReplyContent
		println("DRONE REPLY: " + commandAnswer)
		if { commandAnswer == "OK" } { goToState st_HeadQuarter_onMission }
	endstate
	
	state st_HeadQuarter_onMission
		// check if command is clicked in Dashboard and send it
		set command = exec getCommandToSend()
		doOutIn sendCommand(command)
		acquireAnswerFor command
		set commandAnswer = code.curReplyContent
		if { commandAnswer == "FAIL" } { println("DRONE CMD FAILED: " + commandAnswer) }
		
		if { commandAnswer == "OK" && command == "stop"} { 
			goToState st_HeadQuarter_endMission
		}
				
		// get sensors data
		onMessage? sensorsData goToState st_HeadQuarter_receivedSensorsData
		
		// get photos
		onMessage? photo goToState st_HeadQuarter_receivedPhoto
		
	endstate
	
	state st_HeadQuarter_receivedSensorsData
		// get sensors data
		doPerceive headquarterReceivesensorsDatas()
		set sensorsDatasReceived = code.curInputMsgContent
		// update Dashboard
		call updateDashboard(sensorsDatasReceived)

		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_receivedPhoto
		// get photo data
		doIn receiveDataPhoto()
		set photoReceived = code.curInputMsgContent
		
		// store info
		call storePhotoData(photoReceived)
		
		goToState st_HeadQuarter_onMission
	endstate
	
	state st_HeadQuarter_endMission
		call shutdown()
		transitToEnd
	endstate
}
