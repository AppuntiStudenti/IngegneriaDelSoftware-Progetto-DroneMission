package it.unibo.droneMission.tests;

import it.unibo.droneMission.gauge.Speedometer;
import it.unibo.droneMission.interfaces.IGaugeValue;
import it.unibo.droneMission.interfaces.IGaugeValueInt;
import junit.framework.TestCase;

public class SpeedometerTest extends TestCase {
	protected Speedometer sp;

	public SpeedometerTest(String arg0){
		super(arg0);
	}
	
	protected void setUp() throws Exception {
		sp = new Speedometer();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	//invariant odometer
	protected boolean invariant(Speedometer O){
		return((((O.getVal().valAsInt()>=Speedometer.MIN) && (O.getVal().valAsInt()<=Speedometer.MAX))));
	}

	public void testOnCreate(){
		assertTrue("testOnCreate",(invariant(sp) && sp.getVal().valAsInt()==Speedometer.INIT)); 
	}
	
	//Set value 
	public void testUpdate(IGaugeValueInt val){
		try {
			sp.setVal(val);
			assertTrue("testInc",(invariant(od) && od.getVal().valAsInt()==Odometer.INIT+1));
		} catch (Exception e) {
			fail("testInc" + e.getMessage());
		}
	}
	
	//Increment at limit 
	public void testAtLimit() {
		try {
			incAtLimit();
			od.update();
			assertTrue("testAtLimit",(od.getVal().valAsInt()==Odometer.INIT));
		} catch (Exception e) {
			fail("testAtLimit" + e.getMessage());
		}
	}
	protected void incAtLimit() {
		try {
			for(int i=1;i<=Odometer.MAX;i++){
				od.update();
			}
			assertTrue("incAtLimit", invariant(od));
		} catch (Exception e) {
			fail("incAtLimit"+ e.getMessage());
		}
	}
}
