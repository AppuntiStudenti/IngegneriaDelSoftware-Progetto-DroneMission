/*
*  Generated by AN Unibo 
*/
package it.unibo.contact.droneSubsystem;
import it.unibo.contact.platformuv.*;
import it.unibo.baseEnv.basicFrame.EnvFrame;
import it.unibo.contact.platformuv.LindaLike;
import it.unibo.is.interfaces.IBasicEnvAwt;
import it.unibo.is.interfaces.IContactSystem;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.IAcquireOneReply;
import it.unibo.is.interfaces.platforms.ILindaLike;
import it.unibo.is.interfaces.protocols.IConnInteraction;
public abstract class DroneSubsystemMain implements IContactSystem{
	protected IBasicEnvAwt env = null;
	protected IOutputView view = null;
 	protected LindaLike core = null;
	protected DroneSupport drone;
	protected SpeedSensorSupport speedSensor;
	protected FuelSensorSupport fuelSensor;
	protected OdoSensorSupport odoSensor;
	protected LocationSensorSupport locationSensor;
	protected CameraSupport camera;
protected DroneSubsystemObserver observer;
	public void doJob(){
		initProperty();
		init();
		configure();
		start();
	}
	protected void initProperty(){
	//Properties used by the system  (TODO)
	//System.setProperty("observeSpace", "unset");	//automatically set by selectInput
	//Properties to set communication parameters 
	//System.setProperty("numOfConnectionAttempts", "15");
	//System.setProperty("inputTimeOut", "20000");
	//Properties to show the internal behavior 
	System.setProperty("coreTrace", "unset");
	System.setProperty("medclTrace", "unset");
	System.setProperty("connTrace", "unset"); 
	System.setProperty("signalTrace", "unset");
	System.setProperty("obsTrace", "unset");	
	System.setProperty("ConnProtLindaLike", "unset"); 
	System.setProperty("ConnProtIn", "unset");
	System.setProperty("ConnProtOut", "unset");
	System.setProperty("tcpLowTrace", "unset");
	  }
	protected void init(){
		initSupport();
	}
	protected void initSupport(){
		MsgUtil.init(view);
		core = ((LindaLike)LindaLike.initSpace(view,"droneSubsystem"));
	}
	//For debug purpose
	public Drone get_drone()throws Exception{while(drone==null)Thread.sleep(100);return (Drone)drone; }
	public SpeedSensor get_speedSensor()throws Exception{while(speedSensor==null)Thread.sleep(100);return (SpeedSensor)speedSensor; }
	public FuelSensor get_fuelSensor()throws Exception{while(fuelSensor==null)Thread.sleep(100);return (FuelSensor)fuelSensor; }
	public OdoSensor get_odoSensor()throws Exception{while(odoSensor==null)Thread.sleep(100);return (OdoSensor)odoSensor; }
	public LocationSensor get_locationSensor()throws Exception{while(locationSensor==null)Thread.sleep(100);return (LocationSensor)locationSensor; }
	public Camera get_camera()throws Exception{while(camera==null)Thread.sleep(100);return (Camera)camera; }
	protected void configureSystem(){		
	//Protocols for application messages
	//Application messages
		RunTimeKb.addInputConnMsg( "coreCmd", false); //system dispatch
	}
	protected void configureSubjects(){
	try {
	drone = DroneSupport.create("drone");  
	 	drone.setEnv(env);
	drone.initInputSupports();	 
	speedSensor = SpeedSensorSupport.create("speedSensor");  
	 	speedSensor.setEnv(env);
	speedSensor.initInputSupports();	 
	fuelSensor = FuelSensorSupport.create("fuelSensor");  
	 	fuelSensor.setEnv(env);
	fuelSensor.initInputSupports();	 
	odoSensor = OdoSensorSupport.create("odoSensor");  
	 	odoSensor.setEnv(env);
	odoSensor.initInputSupports();	 
	locationSensor = LocationSensorSupport.create("locationSensor");  
	 	locationSensor.setEnv(env);
	locationSensor.initInputSupports();	 
	camera = CameraSupport.create("camera");  
	 	camera.setEnv(env);
	camera.initInputSupports();	 
	registerObservers();
	}catch(Exception e){e.printStackTrace();}
	}
	protected void configure(){
	 	configureSystem();
		configureSubjects();  
	}
	protected void registerObservers(){
			try {
				observer = new DroneSubsystemObserver();
				LindaLike.register( observer );
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
	protected void start(){
		drone.start();
		speedSensor.start();
		fuelSensor.start();
		odoSensor.start();
		locationSensor.start();
		camera.start();
	}
   	public boolean isPassive() { return true; }
	public void terminate() {
	System.out.println("DroneSubsystem TERMINATES");
	try {
	 	observer.terminate();
	 	
	 	} catch (Exception e) {
		e.printStackTrace();
	}	
	System.exit(1);//The radical solution
	}
	public static void main(String args[]) throws Exception {
	DroneSubsystem system = new DroneSubsystem( );
	system.doJob();
	}
}//DroneSubsystemSupportMain
