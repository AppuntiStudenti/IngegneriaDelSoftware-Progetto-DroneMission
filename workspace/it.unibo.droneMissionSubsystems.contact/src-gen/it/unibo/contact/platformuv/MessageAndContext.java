/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import it.unibo.is.interfaces.platforms.ILindaLike;
import it.unibo.is.interfaces.IMessage;
import it.unibo.is.interfaces.platforms.IMessageAndContext;
import alice.tuprolog.*;
import it.unibo.is.interfaces.protocols.IConnInteraction;
import java.io.FileInputStream;
import java.io.InputStream;


public class MessageAndContext implements IMessageAndContext{
 private IMessage msgIn;
 private String WorkerName;
 private ILindaLike core;
 private	String caller ;
 private	String msgId ;
 private	IConnInteraction support = null;
 private    boolean  useHttp = false;
	
	public MessageAndContext(ILindaLike core, IMessage msgIn, String WorkerName ){
		this.core = core;
		this.msgIn = msgIn;
		this.WorkerName = WorkerName;
		caller = msgIn.msgEmitter();
	    msgId =  msgIn.msgId();
  	}
	
	 public void replyToCaller(String answerMsg) throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
	 //System.out.println("replyToCaller " + useHttp + " support=" + support);
	 if( useHttp ){
  		 replyContentBareToCaller("HTTP/1.0 200 OK\r\n",false);
// 		 replyContentBareToCaller( "Server:  simple java httpServer\r\n", false  );
 		 replyContentBareToCaller( "\r\n", false  );
 		 replyContentBareToCaller(answerMsg,false);
 	 	 replyContentBareToCaller(null,false); //close the connection
 	 	 return;
 	 }
	 //The answerMsg (like any other msg content) must be structured as a term (AN Jun2012)
	 	answerMsg = MsgUtil.putInEnvelope(answerMsg);
     	//TOREMOVE answerMsg = alice.tuprolog.Term.createTerm("envelope('"+ answerMsg.replace("'", "\"") +" ')").toString(); //Check the syntax 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
 		core.out(  outMsg   );
		String endMsg = bm( channelId ,WorkerName, msgIn.msgId(), IMessageAndContext.endMessage, msgIn.msgNum());
		core.out(  endMsg   );	 
	 }
	public void replyStepContentToCaller(String path) throws Exception {
	throw new Exception("replyStepContentToCaller implemented only for networks");
	}
	public void replyContentBareToCaller(String source, boolean isFile) throws Exception {
	throw new Exception("replyContentBareToCaller implemented only for networks");
	}	
	
	 public synchronized void replyStepToCaller(String answerMsg) throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
 	 if( useHttp ){
 	 	 replyContentBareToCaller(answerMsg,false);
 	 	 return;
 	 }
	 //The answerMsg (like any other msg content) must be structured as a term (AN Jun2012)
		answerMsg = MsgUtil.putInEnvelope(answerMsg);
     	//TOREMOVE answerMsg = alice.tuprolog.Term.createTerm("envelope('"+ answerMsg.replace("'", "\"") +" ')").toString(); //Check the syntax 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
	 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), answerMsg , msgIn.msgNum());
		 //System.out.println("replyToCaller " + outMsg);
			core.out(  outMsg   );	
	 }
	 public synchronized void replyEndToCaller() throws Exception{
		 String channelId = channel3( msgIn.msgEmitter(),WorkerName,msgIn.msgId());
 	 String outMsg ="";
 	 if( useHttp ){
 	 	 replyContentBareToCaller(null,false);
 	 	 return;
 	 }
	 		outMsg = bm( channelId ,WorkerName, msgIn.msgId(), IMessageAndContext.endMessage, msgIn.msgNum());
		 //System.out.println("replyToCaller " + outMsg);
			core.out(  outMsg   );	
	 }

 	 public IMessage getReceivedMessage(){
	 	return msgIn;
	 }
	 	 
	protected String channel3( String a1, String a2, String a3  ){
		return a1+"_"+a2+"_"+a3;
	}	

	protected String bm( String channelId, String workerName, 
		String msgId, String content, String msgNum  ){
		return channelId+"("+workerName+" , "+msgId+" , "+content+" , "+msgNum+")";
	}	
}	

