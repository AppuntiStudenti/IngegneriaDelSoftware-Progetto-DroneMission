/*
*  Generated by AN Unibo
*/
package it.unibo.contact.platformuv;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.platforms.ILindaLike;
import java.util.HashMap;
public class RunTimeKb{
	private static HashMap<String,Boolean> inputConnMsg = new HashMap<String,Boolean>();
	private static HashMap<String,ProtocolInfo> subjNS = new HashMap<String,ProtocolInfo>();
		private static HashMap<String,ConnProtIn> subjInConn = new HashMap<String,ConnProtIn>();
		private static HashMap<String,ILindaLike> subjOutConn = new HashMap<String,ILindaLike>();
		private static HashMap<String,ILindaLike> connChannel = new HashMap<String,ILindaLike>();	
	private static IOutputView view = null;	
	private static boolean isDistributed = false;
    private static boolean debug = false;
	
	public static void init(IOutputView aview){
		view = aview;
		String debugOn = System.getProperty("medclTrace");
		if( debugOn != null ) {
			debug = debugOn.equals("set") ;
		}
		init();
	}
	
	public static void init(){
		doprintln(view," **************************************** ");
		doprintln(view," RunTimeKb INIT ");
		doprintln(view," **************************************** ");				
		subjOutConn = new HashMap<String,ILindaLike>();
		subjNS      = new HashMap<String,ProtocolInfo>();
		subjInConn  = new HashMap<String,ConnProtIn>();
	}

	public static void setDistributed(){
		isDistributed = true;
	}
	
	public static boolean isDistributed(){
		return isDistributed ;
	}
	
	public static void addInputConnMsg(String msgId, boolean withAnswer) {
		inputConnMsg.put(msgId, new Boolean( withAnswer ) );
	}
	
	public static Boolean getInputConnMsg(String msgId ) {
		Boolean ba = inputConnMsg.get( msgId );
		if( ba == null ) return new Boolean(false);
 			return ba  ;	//if null it does not exist
 	}

		
	 	public static void addSubject( 
				String protocol, String subjName, String msgId, String hostName, int portNum ){
				subjNS.put(subjName+msgId, new ProtocolInfo(protocol, hostName, portNum) );
		}
		
		public static void removeSubject( String subjName, String msgId ){
			ProtocolInfo p = subjNS.get(subjName+msgId);
			if( p != null )
				subjNS.remove(p);
		}
		
		 
		public static boolean worksWith(String protocol, String subjName, String msgId){
			ProtocolInfo p = subjNS.get(subjName+msgId);
				return p != null && p.getProtocolName().equals(protocol);
	 	}
	
		public static boolean worksWithConnProtocol( String subjName, String msgId){
				ProtocolInfo p = subjNS.get(subjName+msgId);
				return p != null ;
	 	}
	
	/*
	 *  	
	 */
		public static String getHostName(String subjName, String msgId) throws Exception {
			ProtocolInfo p = subjNS.get(subjName+msgId);
			if( p != null )	return  p.getHostName();
			else throw new Exception("No protocol for " + subjName + "-" + msgId);
		}
	
		public static int getPortNum(String subjName, String msgId) throws Exception{
			ProtocolInfo p = subjNS.get(subjName+msgId);
			if( p != null )	return  p.getPortNum();
			else throw new Exception("No protocol for " + subjName + "-" + msgId);
		}
		
	 
	 	
	/*
	 * 	CONNECTION PORT
	 */
		public static void addSubjectConnectionSupport( 
				String sender,  ILindaLike support, IOutputView view ){
			println(view,"addSubjectConnectionSupport PUT in connChannel " + sender);
			connChannel.put(sender, support);
		}
		
		public static ILindaLike getSubjectConnectionSupport( String receiver   ){
			println(view,"getSubjectConnectionSupport from connChannel  for " + receiver + "="+ (connChannel.get( receiver )!=null));
			return connChannel.get( receiver   );
		}
	 
	 
	
		//IN
	 	public static void addSubjectInConnSupport( 
				String subjName, String channel, ConnProtIn support  ){
			println(view, "ADD subjInConn IN "+subjName+"::"+channel);
			subjInConn.put(subjName+channel, support);
	 	}	
		public static void addSubjectReceiverSupport( 
				String subjName, String channel, ILindaLike support  ){
			println(view, "ADD connChannel IN "+subjName+"::"+channel);
			connChannel.put(subjName+channel, support);
	 	}
		
		//GET IN
	 	public static ConnProtIn getSubjectInConnSupport( String subjName, String channel ){		
	//		println(view, "GET subjInConn IN "+subjName+"::"+channel);
			return subjInConn.get( subjName+channel );
	 	}	
		public static ILindaLike getSubjectReceiverSupport( String subjName, String channel ){		
			//println(view, "GET connChannel IN "+subjName+"::"+channel);
			return connChannel.get( subjName+channel );
	 	}
	
		//OUT
		public static void addSubjectOutConnSupport( 
				String subjName, String channel, ILindaLike support  ){
			println(view, "ADD subjOutConn OUT "+subjName+"::"+channel);
	// 		System.out.println(" RunTimeKb "+view+ " ADD OUT "+subjName+"::"+channel);
			subjOutConn.put(subjName+channel+"out", support);
	 	}	
		//GET OUT
		public static ILindaLike getSubjectOutConnSupport( String subjName, String channel ){
			//println(view, "GET subjOutConn OUT "+subjName+"::"+channel);
			return subjOutConn.get( subjName+channel+"out" );
	 	}
/*
* UTILS	
*/	
	
	protected static void println(IOutputView view, String msg){
		if( ! debug ) return ;
		String m = "    %%% RunTimeKb "+ msg ;
		doprintln(view,m);		
	}

	protected static void doprintln(IOutputView view, String m){
		if( view != null )
			view.addOutput(m);
		else System.out.println(m);		
	}	
}
